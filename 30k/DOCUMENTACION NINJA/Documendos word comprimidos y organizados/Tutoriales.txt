Definition
A custom TypeConverter class handling the designed behavior of an indicator's property descriptor collection.  Use this as a base class for any custom TypeConverter you are applying to an indicator class.
 
 
 
Relevant base methods
 
 
Syntax
public class IndicatorBaseConverter : TypeConverter
 
 
 
 
 
Examples
The following document is intended as a high level overview of the NinjaScript changes you can expect between NinjaTrader 7 and NinjaTrader 8.  For specific information on a particular method or property, you can refer to the dynamically formatted Code Breaking table at the bottom of this page.  We recommend using the Filter and Sorting features built into the table, as well checking the Summary column and expanding the Details section of each entry for general information.  Referring to the conveniently linked NinjaTrader 8 and NinjaTrader 7 documentation will provide specific information on syntax, usage, and examples of any new implementation or element names.  
 
 
 
For questions or comments, please contact us at platformsupport@ninjatrader.com
        Implementation Changes Overview
permalink
        Signature Changes Overview
permalink
        Name Changes Overview
permalink
 
 
Code Breaking Table
Below you will find a reference table which lists all of the supported NinjaScript changes between NinjaTrader 7 and NinjaTrader 8.
 
 
Show 255075100All entries
Filter results:
Showing 1 to 25 of 197 entries
Previous12345…8Next
permalink
There are some best practices to be aware of when developing NinjaScript classes. The following tables present a non-exhaustive list of considerations to keep in mind when designing and implementing your code.
 
 
        State management practices
permalink
        Error handling practices
permalink
        Performance practices
permalink
        Miscellaneous practices
permalink
Understanding the SharpDX .NET Library
NinjaTrader Chart objects (such as Indicators, Strategies, DrawingTools, ChartStyles) implement an OnRender() method aimed to render custom lines, shapes, and text to the chart.  To achieve the level of performance required to keep up with market data events, NinjaTrader uses a 3rd-party open-source .NET library named SharpDX.  This 3rd party library provides a C# wrapper for the powerful Microsoft DirectX API used for graphics processing and known for its hardware-accelerated performance, including 2D vector and text layout graphics used for NinjaTrader Chart Rendering.  The SharpDX/DirectX library is extensive, although NinjaTrader only uses a handful of namespaces and classes, which are documented as a guide in this reference.  In addition to this educational resource, we have also compiled a more focused collection of SharpDX SDK Reference resources to help you learn the SharpDX concepts used in NinjaTrader Chart Rendering.
 
 
There are three main SharpDX namespaces you need to be familiar with:
 
 
The rest of this page will help you navigate the fundamental concepts needed to achieve custom rendering to your charts.
        SharpDX Vectors and Charting Coordinates
permalink
        SharpDX Brush Resources
permalink
        SharpDX RenderTarget
permalink
        SharpDX Lines and Shapes
permalink
        SharpDX Text Rendering
permalink
        SharpDX Stroke Style
permalink
         Best Practices for SharpDX Resources
permalink
Definition
A custom TypeConverter class handling the designed behavior of a strategy's property descriptor collection.  Use this as a base class for any custom TypeConverter you are applying to a strategy class.
 
 
 
Relevant base methods
 
 
Syntax
public class StrategyBaseConverter : TypeConverter
 
 
 
 
 
Examples
Definition
Binds an object or property to a specific TypeConverter implementation.  This is commonly used to customize property descriptors on the NinjaTrader property grid.
 
 
 
Syntax
TypeConverterAttribute(string)
TypeConverterAttribute(type)
 
Examples
The default behavior of the NinjaTrader 8 property grid is designed to handle the most basic display of your custom Indicator and Strategy properties. However, there are special cases where you may want to control how unique properties display to other users. Since using a TypeConverter is more of a general C# concept used to convert values between data types (a string to an enum for example), so the possibilities of what you can do are within the bounds of the .NET Framework. This NinjaScript sample was produced to help NinjaScript developers understand how to leverage the IndicatorBaseConverter and StrategyBaseConverter helper classes to customize property grid behavior without affecting general NinjaTrader 8 property behavior.
 
Note
•NinjaTrader 8 expects custom properties to be of value type or type which implements ICloneable interface
•This reference sample assumes you are familiar with basic C# TypeConverter practices and is intended as a starting point. There are extensive 3rd party guides available online which can help you implement a particular type converter goal not covered in this sample
 
Key concepts in this example
There are 5 use cases demonstrated in this sample which fall into two different categories:
 
1. Dynamically manipulate what is displayed on the UI Property Grid
a.Show / hide properties based on secondary input
b.Disable / enable properties based on secondary input
 
2. Customizing how a property is displayed
a.Display "Friendly" enum values
b.Re-implement a "bool" CheckBox as "Friendly" a ComboBox
c.Display a custom collection / list with user defined values at run time
 
Important related documentation
C#
•ICloneable Interface
•PropertyDescriptor Class
•RefreshPropertiesAttribute
•TypeConverter Class
•DisplayAttribute Class
NinjaTrader
•IndicatorBaseConverter Class
•StrategyBaseConverter Class
•TypeConverterAttribute
 
 
 
Import instructions
1.Download the file contained in this Help Guide topic to your PC desktop
2.From the Control Center window, select the menu Tools > Import > NinjaScript
3.Select the downloaded file
 
Additional resources
MSDN - How to: Implement a Type Converter
 
SampleIndicatorTypeConverter_NT8.zip
Multi-Series Scripting Overview
NinjaScript supports multiple time frames and instruments in a single script. This is possible because you can add additional Bars objects to indicators or strategies, in addition to the primary Bars object to which they are applied. A Bars object represents all of the bars of data on a chart. For example, if you had a MSFT 1 minute chart with 200 bars on it, the 200 bars represent one Bars object. In addition to adding Bars objects for reference or for use with indicator methods, you can execute trades across all the different instruments in a script. There is extreme flexibility in the NinjaScript model that NinjaTrader uses for multiple-bars scripts, so it is very important that you understand how it all works before you incorporate additional Bars objects in a script. An important fact to understand is that NinjaScript is truly event driven; every Bars object in a script will call the OnBarUpdate() method. The significance of this will become evident throughout this page.
 
 
It is also important that you understand the following method and properties:
 
•AddDataSeries()
•BarsArray
•BarsInProgress
•CurrentBars
 
        Working With Multi-Time Frame Objects
permalink
        Adding Additional Bars Objects to NinjaScript
permalink
        Creating Series<T> Objects
permalink
        How Bars Data is Referenced
permalink
        Using Bars Objects as Input to Indicator Methods
permalink
        True Event Driven OnBarUpdate() Method
permalink
        Accessing the Price Data in a Multi-Bars NinjaScript
permalink
        Entering, Exiting and Retrieving Position Information
permalink
Definition
A Series<T> is a special generic type of data structure that can be constructed with any chosen data type and holds a series of values equal to the same number of elements as bars in a chart. If you have 200 bars loaded in your chart with a moving average plotted, the moving average itself holds a Series<double> object with 200 historical values of data, one for each bar. Series<double> objects can be used as input data for all indicator methods. The Series<T> class implements the ISeries<T> interface.
 
 
 
Parameters
 
Methods and Properties
 
 
Creating Series<T> Objects
When creating custom indicators, Series<double> objects are automatically created for you by calling the AddPlot() method and can be subsequently referenced by the Value and/or Values property. However, you may have a requirement to create a Series<T> object to store values that are part of an overall indicator value calculation. This can be done within a custom indicator or strategy.
 
 
 
To create a Series<T> object:
 
1.Determine the data type of the Series<T> object you wish to create. This could be double, bool, int, string or any other object type you want.
2.Define a variable of type Series<T> that will hold a Series<T> object. This example will create "myDoubleSeries" as a Series<double>.
3.In the OnStateChange() method, in the State.DataLoaded create a new Series<T> object and assign it to the "myDoubleSeries" variable
 
 
 
 
 
Setting Values
You can set the value for the current bar being evaluated by choosing a "barsAgo" value of "0" or, for historical bars, by choosing a "barsAgo" value that represents the number of bars ago that you want the value to be stored at.
 
 
 
 
 
Checking for Valid Values
It is possible that you may use a Series<T> object but decide not to set a value for a specific bar. However, you should not try to access a Series<T>value that has not been set. Internally, a dummy value does exists, but you want to check to see if it was a valid value that you set before trying to access it for use in your calculations.  Please see IsValidDataPoint() more information.
 
 
 
Getting Values
You can access Series<T> object values using the syntax Series<T>[int barsAgo] where barsAgo represents the data value n (number of bars ago).
 
 
Alternatively, you can access a value at an absolute bar index using the GetValueAt() method.
 
 
 
Methods that Accept ISeries<T> as Arguments
All indicator methods accept ISeries<double> objects as arguments. Carrying from the prior examples, let's print out the 10 period simple moving average of range.
 
NinjaTrader uses a State change system to represent various life cycles of your NinjaScript object.  For more basic indicators and strategies, simply understanding each State described on the OnStateChange() page is sufficient.  However, for more advanced development projects, it is critical to understand how NinjaTrader calls these states for various instances throughout the lifetime of the entire application.
 
When NinjaTrader instantiates a NinjaScript object
There are two categories of instances instantiated by NinjaTrader:
 
•"UI" instances representing its default properties on various user interfaces
•The "configured" instance executing your custom instructions
 
In both categories, OnStateChange() is called at least twice:  once to State.SetDefaults acquiring various default property values, and then again to State.Terminated handling internal references cleanup.
 
 
To elaborate on that process, imagine the sequence of user events required to start an indicator on a chart:
 
1.User right clicks on a Chart and select "Indicator"
2.User adds an Indicator from the Available list
3.User configures desired Properties and presses "Apply" or "OK"
 
During this sequence, there are actually 3 instances of the same indicator created by NinjaTrader:
 
1.The instance displaying the Name property to the list of "Available" indicators (Note: this process involves creating an instance of all indicators in order to build the complete list)
2.The instance displaying the individual Name and its default Properties
3.The instance configured and executing on the chart
 

 
 
To visualize how each instance goes through its States, please consider the logic and flow chart below:
 
1.In order to display the indicator name in the list of "Available" indicators, the NinjaTrader core must find the Name of each installed indicator defined in their SetDefaults.  This occurs simultaneously for every indicator installed on the system in order to build the full list of available indicators.
2.The selected indicator is then cloned and SetDefaults is called again in order to display the default properties to the "Properties" grid.  This only occurs for the individual indicator.
3.After the user has set their desired property settings and press OK or Apply, the indicator is once again cloned and runs through its full state management.  This only occurs for the indicator configured to execute on the chart.
 
 

 
It is the 3rd "configured" instance you are concerned with developing, but you should also be aware of the "UI" instances which are triggered at various stages of NinjaTrader.
 
 
What does this mean for me?
Since OnStateChange() can be called at various times throughout NinjaTrader, you should be diligent in handling each state and managing resources only when it is appropriate that your NinjaScript object was actually configured:
 
•State.SetDefaults should be kept as lean as possible to prevent logic from processing superfluously and causing problems unrelated to the configured instance.  Only properties which need to be displayed on the UI should be set in this state.
•Resources should only be set up once an object has reached State.Configure or State.DataLoaded (see best practices for more information)
•State.Terminated logic should be specific in when it resets a value or destroys a resource.  Since the running instance can be cloned back to a UI instance, checking that a mutable property exists before accessing sometimes is not enough.  You may need to consider adding a flag to help decide when a resource needs to be reset or destroyed.  
 
Example
Let’s say your object was an indicator looking to add a custom toolbar element to the chart, and when the indicator is removed from the chart, you would want to make sure your toolbar elements are also properly removed.  In the OnStateChange() handler you change could add the custom toolbar once the State has reached State.Historical, and remove the toolbar once the State has reached State.Terminated.
 
To ensure that the remove logic only runs in instances that were actually configured, you can see we in the example below we also track that the toolbar needs a reset in State.Terminated state via a custom bool variable.  In other words, the proper reset request comes from our configured instance and would be ignored if the State.Terminated is called from outside our object (i.e., a UI instance). This will prepare our object to properly handle both situations in which State.Terminated could be called in the NinjaTrader state management system.
 
 
Cloning NinjaScript
Clone is the operation of iterating over all public browsable properties on a NinjaScript object and duplicating the values over to a freshly generated instance. For the majority of NinjaScript with standard properties the clone process is transparent to you and you do not need to be concerned the the clone process. For those of you that want more control or will be utilizing complex properties then knowledge about clone is essential. Cloning is performed in 2 primary use cases:
 
1.Configuring an instance in an object dialog and then cloning the configured data to an actual NinjaScript instance applied for example to a Chart. (Configuration then Run)
2.When triggering 'Reload NinjaScript' or "Reload All Historical Data'
 
NinjaScript objects have a base clone method implemented which will iterating over all browsable properties and copy by value to the next instance. The rules follow the 'clone' rules described in the clone documentation located here and described above. The default behavior will work in almost all cases except for when you have some complex custom property which needs specific clone behavior. In which case we allow the ability to override Clone() and specify your own behavior.
 
 
Saving NinjaScript Properties to the Workspace via XML Serialization
XML Serialization comes into play when you have a set of properties and want those properties to persist the user saved workspace (or any templates that are user created).
 
By default basic types such as int, string, bool will all serialize without issue, if you have a complex property you want its setting maintained on restore then you need to create a string serialized representation of that class. The technique is shown in this example post here where we show how to serialize a color brush.
Description
The ZigZag indicator highlights trends based on user defined threshold values and helps filtering the noise in price charts, it's not a classical indicator but more a reactive filter showing extreme price points. In processing it's calculations it can update it's current direction and price extreme point based on newly incoming data, the current developing leg should be thought of temporary until a new leg in opposite direction has been set.
 
You can access methods within this indicator to determine the number of bars ago a zigzag high or low point occurred or the current zigzag value, it is only meaningful to work with in Calculate.OnBarClose mode for the Calculate property.
 
 
Syntax - Bars Ago
High Bar
ZigZag(DeviationType deviationType, double deviationValue, bool useHighLow).HighBar(int barsAgo, int instance, int lookBackPeriod)
ZigZag(ISeries<double> input, DeviationType deviationType, double deviationValue, bool useHighLow).HighBar(int barsAgo, int instance, int lookBackPeriod)
 
Low Bar
ZigZag(DeviationType deviationType, double deviationValue, bool useHighLow).LowBar(int barsAgo, int instance, int lookBackPeriod)
ZigZag(ISeries<double> input, DeviationType deviationType, double deviationValue, bool useHighLow).LowBar(int barsAgo, int instance, int lookBackPeriod)
 
Return Value
An int value representing the number of bars ago. Returns a value of -1 if a swing point is not found within the look back period.
 
 
Syntax - Value
 
Return Value
double; Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.
* A return value of 0 (zero) indicates that a zigzag high or low has not yet formed.
 
 
Parameters
 
 
Example
 
 
Source Code
You can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window.
The OnBarUpdate() method is called for each incoming tick, or on the close of a bar (if enabled) when performing real-time calculations, and is called on each bar of a Bars object when re-calculating the indicator (For example, an indicator would be re-calculated when adding it to an existing chart that has existing price data displayed). This is the main method called for indicator calculation, and we will calculate the CCI value and set the conditions used to draw the CCI plot within this method.
 
The OnStateChange() method is called once before any bar data is loaded, and is used to configure the indicator (among other things).
 
Initializing the Indicator
The code below is automatically generated by the wizard and added to the OnStateChange() method, within State.SetDefaults. It configures the indicator for one plot and five lines, and sets the parameters entered in the wizard:
 
 
To change the visual properties of the Zero Line, replace the third line in the code above with the line below. This will change the color to black and the line style to "dash:"
 
 
The code above uses an alternative method overload (an alternative set of arguments passed in to the AddLine() method), in order to pass in a Stroke object rather than a Brush. With a Stroke, not only can we still specify a Brush, but we have additional options to change the dash style (via DashStyleHelper) and the line width. After this change, your configured lines and plots should look like this:
 
 
Adding Core Indicator Logic
Since this tutorial is meant to cover custom drawing and manually changing properties within an indicator, we will not go too in-depth into the core calculation logic for this custom CCI. Instead, we will copy and paste the core calculation logic from the @CCI indicator already built-in to NinjaTrader.
 
The @CCI indicator uses an SMA object in its calculations. To add this, copy the line below from @CCI into your custom CCI, directly below the class declaration:
 
 
Next, copy the following initialization for the SMA object into the OnStateChange() method, within State.Configure:
 
 
Next, copy the core calculation logic from @CCI into the OnBarUpdate() method of your custom indicator:
 
 
The code for your MyCCI class should now look as follows (in addition to the using statements and class declaration) :
 
 
Custom Drawing
Add the following code into the OnBarUpdate() method, directly beneath the core calculation logic:
 
 
This will conditionally change the color of the CCI plot (referenced by Values[0]) based on its value. By using PlotBrushes[0][0], we are specifying that we wish to change the color of the first plot in the collection at a specific bar index (the current bar index each time the condition is triggered), and we wish for the plot the remain that color at that index, even if the plot value changes in the future. If instead we wished to change the entire plot color, we could use Plots[0].Brush.
 
PlotBrushes holds a collection of brushes used for the various plots in the indicator. In addition to this, there are several other collections that serve similar purposes, which can be used in the same way. Some examples of these collections are below:
 
 
Now that everything is in place, your class code should look as below. You are now ready to compile the indicator and configure it on a chart.
 
 
 
Definition
Represents an object that can receive drawing commands.
(See also unmanaged API documentation)
 
Syntax
class RenderTarget
 
 
 
Methods and Properties


The OnBarUpdate() method is called for each incoming tick, or on the close of a bar (if enabled) when performing real-time calculations, and is called on each bar of a Bars object when re-calculating the indicator (For example, an indicator would be re-calculated when adding it to an existing chart that has existing price data displayed). This is the main method called for indicator calculation, and we will calculate the CCI value and set the conditions used to draw the CCI plot within this method.
 
The OnStateChange() method is called once before any bar data is loaded, and is used to configure the indicator (among other things).
 
Initializing the Indicator
The code below is automatically generated by the wizard and added to the OnStateChange() method, within State.SetDefaults. It configures the indicator for one plot and five lines, and sets the parameters entered in the wizard:
 
 
To change the visual properties of the Zero Line, replace the third line in the code above with the line below. This will change the color to black and the line style to "dash:"
 
 
The code above uses an alternative method overload (an alternative set of arguments passed in to the AddLine() method), in order to pass in a Stroke object rather than a Brush. With a Stroke, not only can we still specify a Brush, but we have additional options to change the dash style (via DashStyleHelper) and the line width. After this change, your configured lines and plots should look like this:
 
 
Adding Core Indicator Logic
Since this tutorial is meant to cover custom drawing and manually changing properties within an indicator, we will not go too in-depth into the core calculation logic for this custom CCI. Instead, we will copy and paste the core calculation logic from the @CCI indicator already built-in to NinjaTrader.
 
The @CCI indicator uses an SMA object in its calculations. To add this, copy the line below from @CCI into your custom CCI, directly below the class declaration:
 
 
Next, copy the following initialization for the SMA object into the OnStateChange() method, within State.Configure:
 
 
Next, copy the core calculation logic from @CCI into the OnBarUpdate() method of your custom indicator:
 
 
The code for your MyCCI class should now look as follows (in addition to the using statements and class declaration) :
 
 
Custom Drawing
Add the following code into the OnBarUpdate() method, directly beneath the core calculation logic:
 
 
This will conditionally change the color of the CCI plot (referenced by Values[0]) based on its value. By using PlotBrushes[0][0], we are specifying that we wish to change the color of the first plot in the collection at a specific bar index (the current bar index each time the condition is triggered), and we wish for the plot the remain that color at that index, even if the plot value changes in the future. If instead we wished to change the entire plot color, we could use Plots[0].Brush.
 
PlotBrushes holds a collection of brushes used for the various plots in the indicator. In addition to this, there are several other collections that serve similar purposes, which can be used in the same way. Some examples of these collections are below:
 
 
Now that everything is in place, your class code should look as below. You are now ready to compile the indicator and configure it on a chart.
 
Release Date
July 11, 2016
 
Code Breaking Changes
Compile Errors
•The NinjaScript Strategy "AccountSize" concept was removed due to limited functionality.  This change would also impact strategies which were coded to use SetOrderQuantity.ByAccountSize.  Please use your own variables to set quantities by account size. Tip:  NinjaTrader 8 can read real-world account values for live trading purposes through the Account class, e.g., Account.Get(AccountItem.CashValue, Currency.UsDollar) provides a method for returning a double value representing the current cash value of the account.
 
Implementation changes
•The concept used to force plot series objects through ForcePlotsMaximumBarsLookBackInfinite was disabled and tagged as obsolete.  You should set any indicator/strategy plots to MaximumBarsLookBack.Infinite during its construction.
•It is recommended that any strategies generated with the 'Strategy Builder' tool via Control Center > New > Strategy Builder be removed and recreated after installing B12. If you had invested significant effort in a Strategy Builder generated strategy in B11 which you would like to continue to use, please contact us platformsupport@ninjatrader.com
 
Notes
Release Date
May 12, 2016
 
Code Breaking Changes
Compile Errors
•Draw.RegionHighlightY(), Draw.ArrowLine() – Added missing "isAutoScale" bool to some signatures
 
Implementation changes
•In some scenarios, the OnRender() method no longer guarantees the bars indexer to be up to date before it is called. Due to the multi-threaded nature of NinjaTrader, attempting to access a series barsAgo value could return seemingly unexpected results (E.g., Close[0], SMA(20)[0], etc).  This change does NOT impact data driven events, such as OnBarUpdate(), OnMarketData(), OnOrderUpdate(), etc.  For all OnRender() purposes, you should consider using an absolute index lockup through Bars.GetClose(barIndex), or <series>.GetValueAt(barIndex) which are generally more reliable in non-data driven events.  Please also see the new IsValidDataPointAt() which was added to help with absolute index look up.
 
•Type Casting DrawObjects can fail from a compiled assembly.  In situations where you need to cast a draw object in an assembly, it is recommended you use the dynamic type and compare the object type by its string.  This is not required for non-protected scripts.  Please see the help guide article on Considerations For Compiled Assemblies for more details and examples.
 
Notes
 
 


