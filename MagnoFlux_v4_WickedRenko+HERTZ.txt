using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using NinjaTrader.Cbi;
using NinjaTrader.Data;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.NinjaScript;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.Strategies;
using NinjaTrader.NinjaScript.DrawingTools;
using System.Windows.Media;

namespace NinjaTrader.NinjaScript.Strategies
{
    public class MagnoFlux_v4_WickedRenko_Only : Strategy
    {
        #region Parameters
        [NinjaScriptProperty]
        [Display(Name = "RenkoSize", Order = 1, GroupName = "Parameters")]
        [Range(1, int.MaxValue, ErrorMessage = "RenkoSize must be positive")]
        public int RenkoSize { get; set; } = 30;

        [NinjaScriptProperty]
        [Display(Name = "ProfitTargetTicks", Order = 2, GroupName = "Parameters")]
        [Range(1, int.MaxValue, ErrorMessage = "ProfitTargetTicks must be positive")]
        public int ProfitTargetTicks { get; set; } = 30; // slightly less profit for robustness

        [NinjaScriptProperty]
        [Display(Name = "StopLossTicks", Order = 3, GroupName = "Parameters")]
        [Range(1, int.MaxValue, ErrorMessage = "StopLossTicks must be positive")]
        public int StopLossTicks { get; set; } = 50;

        [NinjaScriptProperty]
        [Display(Name = "EnableLogging", Order = 4, GroupName = "Parameters")]
        public bool EnableLogging { get; set; } = true;

        [NinjaScriptProperty]
        [Display(Name = "IdealMinHz", Order = 5, GroupName = "Hertz")]
        public double IdealMinHz { get; set; } = 0.002;

        [NinjaScriptProperty]
        [Display(Name = "IdealMaxHz", Order = 6, GroupName = "Hertz")]
        public double IdealMaxHz { get; set; } = 0.005;

        [NinjaScriptProperty]
        [Display(Name = "LookbackSignals", Order = 7, GroupName = "Hertz")]
        [Range(2, int.MaxValue, ErrorMessage = "LookbackSignals must be >= 2")]
        public int LookbackSignals { get; set; } = 10;

        [NinjaScriptProperty]
        [Display(Name = "EnableHzLogging", Order = 8, GroupName = "Hertz")]
        public bool EnableHzLogging { get; set; } = false;

        [NinjaScriptProperty]
        [Display(Name = "CsvFileName", Order = 9, GroupName = "Hertz")]
        public string CsvFileName { get; set; } = "HertzTuner.csv";
        #endregion

        private double entryPrice;
        private SMA volumeSma;
        private Momentum momentum;

        private readonly List<DateTime> signalTimes = new List<DateTime>();
        private double currentHz;
        private string statusEmoji = "\uD83D\uDFE1"; // yellow by default

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Name = "MagnoFlux_v4_WickedRenko_Only";
                Calculate = Calculate.OnBarClose;
                EntriesPerDirection = 1;
                EntryHandling = EntryHandling.AllEntries;
                IsExitOnSessionCloseStrategy = true;
                IncludeCommission = true;
            }
            else if (State == State.DataLoaded)
            {
                volumeSma = SMA(Volume, 5);
                momentum = Momentum(14);
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < Math.Max(volumeSma.Period, momentum.Period))
                return;

            if (Position.MarketPosition == MarketPosition.Flat)
            {
                if (IsValidLongSignal())
                {
                    LogHertz(Time[0]);
                    if (EnableLogging)
                        Print($"SIGNAL=Long HZ={currentHz:F4} {statusEmoji} CONFIRM={Time[0]} TP={Close[0] + ProfitTargetTicks * TickSize} SL={Close[0] - StopLossTicks * TickSize}");
                    Draw.TriangleUp(this, "LongSignal" + CurrentBar, false, 0, Low[0] - 2 * TickSize, Brushes.Lime);
                    EnterLong("LongEntry");
                }
                else if (IsValidShortSignal())
                {
                    LogHertz(Time[0]);
                    if (EnableLogging)
                        Print($"SIGNAL=Short HZ={currentHz:F4} {statusEmoji} CONFIRM={Time[0]} TP={Close[0] - ProfitTargetTicks * TickSize} SL={Close[0] + StopLossTicks * TickSize}");
                    Draw.TriangleDown(this, "ShortSignal" + CurrentBar, false, 0, High[0] + 2 * TickSize, Brushes.Red);
                    EnterShort("ShortEntry");
                }
            }
            else
            {
                ManagePosition();
            }

            Draw.TextFixed(this, "HertzDisplay", $"Hz: {currentHz:F4} {statusEmoji}", TextPosition.TopRight);
        }

        protected override void OnExecutionUpdate(Execution execution, string executionId, double price, int quantity, MarketPosition marketPosition, string orderId, DateTime time)
        {
            if (execution.Order.OrderState == OrderState.Filled &&
                (execution.Order.Name == "LongEntry" || execution.Order.Name == "ShortEntry"))
            {
                entryPrice = execution.Price;
            }
        }

        private bool IsValidLongSignal()
        {
            if (Close[0] <= Open[0])
                return false;

            double body = Math.Abs(Close[0] - Open[0]);
            double range = High[0] - Low[0];
            if (body / range < 0.5)
                return false;

            if (Volume[0] < volumeSma[0])
                return false;

            return momentum[0] > 0;
        }

        private bool IsValidShortSignal()
        {
            if (Close[0] >= Open[0])
                return false;

            double body = Math.Abs(Close[0] - Open[0]);
            double range = High[0] - Low[0];
            if (body / range < 0.5)
                return false;

            if (Volume[0] < volumeSma[0])
                return false;

            return momentum[0] < 0;
        }

        private void ManagePosition()
        {
            if (Position.MarketPosition == MarketPosition.Long)
            {
                double target = entryPrice + ProfitTargetTicks * TickSize;
                double stop = entryPrice - StopLossTicks * TickSize;
                if (High[0] >= target)
                {
                    ExitLong("TP", "");
                    if (EnableLogging)
                        Print($"TP hit at {Close[0]} (target {target})");
                }
                else if (Low[0] <= stop)
                {
                    ExitLong("SL", "");
                    if (EnableLogging)
                        Print($"SL hit at {Close[0]} (stop {stop})");
                }
            }
            else if (Position.MarketPosition == MarketPosition.Short)
            {
                double target = entryPrice - ProfitTargetTicks * TickSize;
                double stop = entryPrice + StopLossTicks * TickSize;
                if (Low[0] <= target)
                {
                    ExitShort("TP", "");
                    if (EnableLogging)
                        Print($"TP hit at {Close[0]} (target {target})");
                }
                else if (High[0] >= stop)
                {
                    ExitShort("SL", "");
                    if (EnableLogging)
                        Print($"SL hit at {Close[0]} (stop {stop})");
                }
            }
        }

        private void LogHertz(DateTime time)
        {
            signalTimes.Add(time);
            if (signalTimes.Count > LookbackSignals)
                signalTimes.RemoveAt(0);

            if (signalTimes.Count >= 2)
            {
                double totalSeconds = 0;
                for (int i = 1; i < signalTimes.Count; i++)
                {
                    totalSeconds += (signalTimes[i] - signalTimes[i - 1]).TotalSeconds;
                }
                double avgSeconds = totalSeconds / (signalTimes.Count - 1);
                if (avgSeconds > 0)
                {
                    currentHz = 1.0 / avgSeconds;
                    if (currentHz >= IdealMinHz && currentHz <= IdealMaxHz)
                        statusEmoji = "\uD83D\uDFE2"; // green
                    else if (currentHz > IdealMaxHz)
                        statusEmoji = "\uD83D\uDFE1"; // yellow
                    else
                        statusEmoji = "\uD83D\uDD34"; // red
                }
            }

            if (EnableHzLogging)
            {
                string logLine = $"{time:yyyy-MM-dd HH:mm:ss},{currentHz:F6},{statusEmoji}";
                Print(logLine);
                try
                {
                    File.AppendAllText(CsvFileName, logLine + Environment.NewLine);
                }
                catch { }
            }
        }
    }
}