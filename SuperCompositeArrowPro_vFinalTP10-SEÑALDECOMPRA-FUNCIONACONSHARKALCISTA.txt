// -------------------------------------------
// SuperCompositeArrowPro_vFinalTP10 – NinjaTrader 8
// ✅ Señales visibles, salida confiable, TP/SL de 10 puntos exactos
// -------------------------------------------
using System;
using System.Globalization;
using System.Windows.Media;
using NinjaTrader.Cbi;
using NinjaTrader.Data;
using NinjaTrader.Gui.Tools;
using NinjaTrader.NinjaScript;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;

namespace NinjaTrader.NinjaScript.Indicators
{
    public class SuperCompositeArrowPro_vFinalTP10 : Indicator
    {
        private EMA ema;
        private RSI rsi;
        private ATR atr;
        private Series<double> volSpike;
        private Series<double> imbalance;

        private int signalBar = -1;
        private bool inTrade = false;
        private SignalData sig = null;

        [NinjaScriptProperty]
        public int SignalPoints { get; set; } = 40; // 10 pts = 40 ticks

        [NinjaScriptProperty]
        public int CooldownBars { get; set; } = 10;

        [NinjaScriptProperty]
        public double ThresholdVolSpike { get; set; } = 0.6;

        [NinjaScriptProperty]
        public double ThresholdImbalance { get; set; } = 0.6;

        [NinjaScriptProperty]
        public double BetaEMA { get; set; } = 1.2;
        [NinjaScriptProperty]
        public double BetaATR { get; set; } = 0.8;
        [NinjaScriptProperty]
        public double BetaRSI { get; set; } = 1.1;
        [NinjaScriptProperty]
        public double BetaMomentum { get; set; } = 0.9;
        [NinjaScriptProperty]
        public double BetaDistEMA { get; set; } = 1.0;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Name = "SuperCompositeArrowPro_vFinalTP10";
                Calculate = Calculate.OnBarClose;
                IsOverlay = true;
            }
            else if (State == State.DataLoaded)
            {
                ema = EMA(21);
                rsi = RSI(14, 3);
                atr = ATR(14);
                volSpike = new Series<double>(this);
                imbalance = new Series<double>(this);
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < 50) return;

            double slope = ema[0] - ema[5];
            double normATR = atr[0] / Close[0];
            double normRSI = rsi[0] / 100;
            double dist = Math.Abs(Close[0] - ema[0]) / TickSize;
            double prob = BetaEMA * slope + BetaATR * normATR + BetaRSI * normRSI + BetaDistEMA * dist + BetaMomentum * (Close[0] - Close[5]);

            // Calcular imbalance y volSpike
            double buyVol = Close[0] > Open[0] ? Volume[0] : 0;
            double sellVol = Volume[0] - buyVol;
            imbalance[0] = (buyVol - sellVol) / (buyVol + sellVol + 1);
            double avgVol = SMA(Volume, 14)[0];
            volSpike[0] = Volume[0] / (avgVol == 0 ? 1 : avgVol);

            bool reversalLong = Close[2] < Open[2] && Close[1] < Open[1] && Close[0] > Open[0];
            bool reversalShort = Close[2] > Open[2] && Close[1] > Open[1] && Close[0] < Open[0];
            bool volOK = volSpike[0] > ThresholdVolSpike;
            bool imbalanceOK = imbalance[0] > ThresholdImbalance;

            if (!inTrade && CurrentBar > signalBar + CooldownBars)
            {
                if (reversalLong && prob > 0.75 && volOK && imbalanceOK)
                    EnterSignal(true);
                else if (reversalShort && prob < -0.75 && volOK && imbalanceOK)
                    EnterSignal(false);
            }

            if (inTrade && sig != null && !sig.Done && CurrentBar > sig.EntryBar)
            {
                bool hitTP = sig.IsLong ? High[0] >= sig.TP : Low[0] <= sig.TP;
                bool hitSL = sig.IsLong ? Low[0] <= sig.SL : High[0] >= sig.SL;
                if (hitTP || hitSL)
                {
                    string resultado = hitTP ? "TP" : "SL";
                    Print($"{(sig.IsLong ? "LONG" : "SHORT")}={sig.Time:HH:mm:ss} - Señal {sig.EntryPrice:0.00} Entrada={sig.EntryPrice:0.00} - TP={sig.TP:0.00} - SL={sig.SL:0.00} - Resultado={resultado}".Replace('.', ','));
                    sig.Done = true;
                    inTrade = false;
                }
            }
        }

        private void EnterSignal(bool isLong)
        {
            signalBar = CurrentBar;
            double entry = Open[1];
            double tp = isLong ? entry + SignalPoints * TickSize : entry - SignalPoints * TickSize;
            double sl = isLong ? entry - SignalPoints * TickSize : entry + SignalPoints * TickSize;
            sig = new SignalData { Time = Time[0], EntryBar = signalBar + 1, EntryPrice = entry, TP = tp, SL = sl, IsLong = isLong, Done = false };
            inTrade = true;

            if (isLong)
                Draw.ArrowUp(this, "sigUp" + CurrentBar, true, 0, Low[0] - 2 * TickSize, Brushes.Lime);
            else
                Draw.ArrowDown(this, "sigDn" + CurrentBar, true, 0, High[0] + 2 * TickSize, Brushes.Red);
        }

        private class SignalData
        {
            public DateTime Time;
            public int EntryBar;
            public double EntryPrice;
            public double TP;
            public double SL;
            public bool IsLong;
            public bool Done;
        }
    }
}


#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private SuperCompositeArrowPro_vFinalTP10[] cacheSuperCompositeArrowPro_vFinalTP10;
		public SuperCompositeArrowPro_vFinalTP10 SuperCompositeArrowPro_vFinalTP10(int signalPoints, int cooldownBars, double thresholdVolSpike, double thresholdImbalance, double betaEMA, double betaATR, double betaRSI, double betaMomentum, double betaDistEMA)
		{
			return SuperCompositeArrowPro_vFinalTP10(Input, signalPoints, cooldownBars, thresholdVolSpike, thresholdImbalance, betaEMA, betaATR, betaRSI, betaMomentum, betaDistEMA);
		}

		public SuperCompositeArrowPro_vFinalTP10 SuperCompositeArrowPro_vFinalTP10(ISeries<double> input, int signalPoints, int cooldownBars, double thresholdVolSpike, double thresholdImbalance, double betaEMA, double betaATR, double betaRSI, double betaMomentum, double betaDistEMA)
		{
			if (cacheSuperCompositeArrowPro_vFinalTP10 != null)
				for (int idx = 0; idx < cacheSuperCompositeArrowPro_vFinalTP10.Length; idx++)
					if (cacheSuperCompositeArrowPro_vFinalTP10[idx] != null && cacheSuperCompositeArrowPro_vFinalTP10[idx].SignalPoints == signalPoints && cacheSuperCompositeArrowPro_vFinalTP10[idx].CooldownBars == cooldownBars && cacheSuperCompositeArrowPro_vFinalTP10[idx].ThresholdVolSpike == thresholdVolSpike && cacheSuperCompositeArrowPro_vFinalTP10[idx].ThresholdImbalance == thresholdImbalance && cacheSuperCompositeArrowPro_vFinalTP10[idx].BetaEMA == betaEMA && cacheSuperCompositeArrowPro_vFinalTP10[idx].BetaATR == betaATR && cacheSuperCompositeArrowPro_vFinalTP10[idx].BetaRSI == betaRSI && cacheSuperCompositeArrowPro_vFinalTP10[idx].BetaMomentum == betaMomentum && cacheSuperCompositeArrowPro_vFinalTP10[idx].BetaDistEMA == betaDistEMA && cacheSuperCompositeArrowPro_vFinalTP10[idx].EqualsInput(input))
						return cacheSuperCompositeArrowPro_vFinalTP10[idx];
			return CacheIndicator<SuperCompositeArrowPro_vFinalTP10>(new SuperCompositeArrowPro_vFinalTP10(){ SignalPoints = signalPoints, CooldownBars = cooldownBars, ThresholdVolSpike = thresholdVolSpike, ThresholdImbalance = thresholdImbalance, BetaEMA = betaEMA, BetaATR = betaATR, BetaRSI = betaRSI, BetaMomentum = betaMomentum, BetaDistEMA = betaDistEMA }, input, ref cacheSuperCompositeArrowPro_vFinalTP10);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.SuperCompositeArrowPro_vFinalTP10 SuperCompositeArrowPro_vFinalTP10(int signalPoints, int cooldownBars, double thresholdVolSpike, double thresholdImbalance, double betaEMA, double betaATR, double betaRSI, double betaMomentum, double betaDistEMA)
		{
			return indicator.SuperCompositeArrowPro_vFinalTP10(Input, signalPoints, cooldownBars, thresholdVolSpike, thresholdImbalance, betaEMA, betaATR, betaRSI, betaMomentum, betaDistEMA);
		}

		public Indicators.SuperCompositeArrowPro_vFinalTP10 SuperCompositeArrowPro_vFinalTP10(ISeries<double> input , int signalPoints, int cooldownBars, double thresholdVolSpike, double thresholdImbalance, double betaEMA, double betaATR, double betaRSI, double betaMomentum, double betaDistEMA)
		{
			return indicator.SuperCompositeArrowPro_vFinalTP10(input, signalPoints, cooldownBars, thresholdVolSpike, thresholdImbalance, betaEMA, betaATR, betaRSI, betaMomentum, betaDistEMA);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.SuperCompositeArrowPro_vFinalTP10 SuperCompositeArrowPro_vFinalTP10(int signalPoints, int cooldownBars, double thresholdVolSpike, double thresholdImbalance, double betaEMA, double betaATR, double betaRSI, double betaMomentum, double betaDistEMA)
		{
			return indicator.SuperCompositeArrowPro_vFinalTP10(Input, signalPoints, cooldownBars, thresholdVolSpike, thresholdImbalance, betaEMA, betaATR, betaRSI, betaMomentum, betaDistEMA);
		}

		public Indicators.SuperCompositeArrowPro_vFinalTP10 SuperCompositeArrowPro_vFinalTP10(ISeries<double> input , int signalPoints, int cooldownBars, double thresholdVolSpike, double thresholdImbalance, double betaEMA, double betaATR, double betaRSI, double betaMomentum, double betaDistEMA)
		{
			return indicator.SuperCompositeArrowPro_vFinalTP10(input, signalPoints, cooldownBars, thresholdVolSpike, thresholdImbalance, betaEMA, betaATR, betaRSI, betaMomentum, betaDistEMA);
		}
	}
}

#endregion
