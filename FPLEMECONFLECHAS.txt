#region Using declarations
using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Windows.Media;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

namespace NinjaTrader.NinjaScript.Indicators
{
    public class FPLEMEConfirmSim : Indicator
    {
        [NinjaScriptProperty]
        [Display(Name = "Cooldown Bars", Order = 1, GroupName = "Parameters")]
        public int CooldownBars { get; set; }

        [NinjaScriptProperty]
        [Display(Name = "Volume Multiplier", Order = 2, GroupName = "Parameters")]
        public double VolumeMultiplier { get; set; }

        [NinjaScriptProperty]
        [Display(Name = "EMA Period", Order = 3, GroupName = "Parameters")]
        public int EMAPeriod { get; set; }

        [NinjaScriptProperty]
        [Display(Name = "Session Start", Order = 4, GroupName = "Parameters")]
        public string SessionStart { get; set; }

        [NinjaScriptProperty]
        [Display(Name = "Session End", Order = 5, GroupName = "Parameters")]
        public string SessionEnd { get; set; }

        [NinjaScriptProperty]
        [Display(Name = "Bullish Arrow Color", GroupName = "Appearance", Order = 6)]
        public Brush BullishArrowColor { get; set; }

        [NinjaScriptProperty]
        [Display(Name = "Bearish Arrow Color", GroupName = "Appearance", Order = 7)]
        public Brush BearishArrowColor { get; set; }

        private int lastSignalBar = -1000;
        private TimeSpan sessionStart, sessionEnd;
        private EMA ema;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Name             = "FPLEMEConfirmSim";
                Description      = "Simulación visual de confluencia estilo FPLEME usando lógica nativa.";
                Calculate        = Calculate.OnBarClose;
                IsOverlay        = true;
                DisplayInDataBox = false;

                CooldownBars     = 3;
                VolumeMultiplier = 1.5;
                EMAPeriod        = 14;
                SessionStart     = "10:30";
                SessionEnd       = "13:00";

                BullishArrowColor = Brushes.LimeGreen;
                BearishArrowColor = Brushes.Red;
            }
            else if (State == State.Configure)
            {
                sessionStart = TimeSpan.Parse(SessionStart);
                sessionEnd   = TimeSpan.Parse(SessionEnd);
            }
            else if (State == State.DataLoaded)
            {
                ema = EMA(EMAPeriod);
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < EMAPeriod + 3 || CurrentBar <= lastSignalBar + CooldownBars)
                return;

            var now = Time[0].TimeOfDay;
            if (now < sessionStart || now > sessionEnd)
                return;

            double avgVolume = SMA(Volume, 14)[0];
            double vol       = Volume[0];
            double slope     = (ema[0] - ema[3]) / (3 * TickSize);

            bool strongVolume = vol > avgVolume * VolumeMultiplier;

            // Señal LONG
            if (Close[0] > MAX(High, 3)[1] && slope > 0 && strongVolume)
            {
                Draw.ArrowUp(this, "LongArrow" + CurrentBar, true, 0, Low[0] - TickSize, BullishArrowColor);
                Print($"[LONG] {Time[0]:HH:mm:ss} – EMA Slope={slope:F4}, Volume={vol}, Avg={avgVolume:F2}");
                lastSignalBar = CurrentBar;
            }
            // Señal SHORT
            else if (Close[0] < MIN(Low, 3)[1] && slope < 0 && strongVolume)
            {
                Draw.ArrowDown(this, "ShortArrow" + CurrentBar, true, 0, High[0] + TickSize, BearishArrowColor);
                Print($"[SHORT] {Time[0]:HH:mm:ss} – EMA Slope={slope:F4}, Volume={vol}, Avg={avgVolume:F2}");
                lastSignalBar = CurrentBar;
            }
        }
    }
}


#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private FPLEMEConfirmSim[] cacheFPLEMEConfirmSim;
		public FPLEMEConfirmSim FPLEMEConfirmSim(int cooldownBars, double volumeMultiplier, int eMAPeriod, string sessionStart, string sessionEnd, Brush bullishArrowColor, Brush bearishArrowColor)
		{
			return FPLEMEConfirmSim(Input, cooldownBars, volumeMultiplier, eMAPeriod, sessionStart, sessionEnd, bullishArrowColor, bearishArrowColor);
		}

		public FPLEMEConfirmSim FPLEMEConfirmSim(ISeries<double> input, int cooldownBars, double volumeMultiplier, int eMAPeriod, string sessionStart, string sessionEnd, Brush bullishArrowColor, Brush bearishArrowColor)
		{
			if (cacheFPLEMEConfirmSim != null)
				for (int idx = 0; idx < cacheFPLEMEConfirmSim.Length; idx++)
					if (cacheFPLEMEConfirmSim[idx] != null && cacheFPLEMEConfirmSim[idx].CooldownBars == cooldownBars && cacheFPLEMEConfirmSim[idx].VolumeMultiplier == volumeMultiplier && cacheFPLEMEConfirmSim[idx].EMAPeriod == eMAPeriod && cacheFPLEMEConfirmSim[idx].SessionStart == sessionStart && cacheFPLEMEConfirmSim[idx].SessionEnd == sessionEnd && cacheFPLEMEConfirmSim[idx].BullishArrowColor == bullishArrowColor && cacheFPLEMEConfirmSim[idx].BearishArrowColor == bearishArrowColor && cacheFPLEMEConfirmSim[idx].EqualsInput(input))
						return cacheFPLEMEConfirmSim[idx];
			return CacheIndicator<FPLEMEConfirmSim>(new FPLEMEConfirmSim(){ CooldownBars = cooldownBars, VolumeMultiplier = volumeMultiplier, EMAPeriod = eMAPeriod, SessionStart = sessionStart, SessionEnd = sessionEnd, BullishArrowColor = bullishArrowColor, BearishArrowColor = bearishArrowColor }, input, ref cacheFPLEMEConfirmSim);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.FPLEMEConfirmSim FPLEMEConfirmSim(int cooldownBars, double volumeMultiplier, int eMAPeriod, string sessionStart, string sessionEnd, Brush bullishArrowColor, Brush bearishArrowColor)
		{
			return indicator.FPLEMEConfirmSim(Input, cooldownBars, volumeMultiplier, eMAPeriod, sessionStart, sessionEnd, bullishArrowColor, bearishArrowColor);
		}

		public Indicators.FPLEMEConfirmSim FPLEMEConfirmSim(ISeries<double> input , int cooldownBars, double volumeMultiplier, int eMAPeriod, string sessionStart, string sessionEnd, Brush bullishArrowColor, Brush bearishArrowColor)
		{
			return indicator.FPLEMEConfirmSim(input, cooldownBars, volumeMultiplier, eMAPeriod, sessionStart, sessionEnd, bullishArrowColor, bearishArrowColor);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.FPLEMEConfirmSim FPLEMEConfirmSim(int cooldownBars, double volumeMultiplier, int eMAPeriod, string sessionStart, string sessionEnd, Brush bullishArrowColor, Brush bearishArrowColor)
		{
			return indicator.FPLEMEConfirmSim(Input, cooldownBars, volumeMultiplier, eMAPeriod, sessionStart, sessionEnd, bullishArrowColor, bearishArrowColor);
		}

		public Indicators.FPLEMEConfirmSim FPLEMEConfirmSim(ISeries<double> input , int cooldownBars, double volumeMultiplier, int eMAPeriod, string sessionStart, string sessionEnd, Brush bullishArrowColor, Brush bearishArrowColor)
		{
			return indicator.FPLEMEConfirmSim(input, cooldownBars, volumeMultiplier, eMAPeriod, sessionStart, sessionEnd, bullishArrowColor, bearishArrowColor);
		}
	}
}

#endregion
