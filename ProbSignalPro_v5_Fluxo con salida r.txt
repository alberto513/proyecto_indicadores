ProbSignalPro_v5_Fluxo con salida real output

üìä RESULTADOS FINALES
‚úÖ Total de se√±ales: 7.857

üéØ TP: 4.081

‚ùå SL: 3.776

üìà Porcentaje de acierto: 51,94 %

üí∞ Puntos ganados: 40.810

üîª Puntos perdidos: 37.760







using System;
using System.Collections.Generic;
using System.Globalization;
using System.Windows.Media;
using NinjaTrader.Data;
using NinjaTrader.Gui.Chart;
using NinjaTrader.NinjaScript;
using NinjaTrader.NinjaScript.DrawingTools;
using NinjaTrader.NinjaScript.Indicators;

namespace NinjaTrader.NinjaScript.Indicators
{
    public class ProbSignalPro_v5_Fluxo : Indicator
    {
        #region Campos internos
        private EMA ema;
        private RSI rsi;
        private ATR atr;
        private double lastVolume = 0;
        private int lastSignalBar = -1000;

        private class SignalData
        {
            public int Bar;                // √çndice de barra de la se√±al
            public bool IsLong;            // Direcci√≥n
            public DateTime SignalTime;    // Hora de cierre de la barra de se√±al
            public double SignalPrice;     // Precio de cierre de la se√±al
            public double EntryPrice;      // Precio de apertura de la siguiente barra
            public double TpPrice;         // Nivel TP
            public double SlPrice;         // Nivel SL
            public bool Done;              // Ya impreso?
        }
        private List<SignalData> pending = new List<SignalData>();
        #endregion

        #region Propiedades configurables
        [NinjaScriptProperty] public double Beta0    { get; set; } = -1.0;
        [NinjaScriptProperty] public double BetaEMA  { get; set; } = 0.6;
        [NinjaScriptProperty] public double BetaRSI  { get; set; } = 0.4;
        [NinjaScriptProperty] public double BetaATR  { get; set; } = -0.2;
        [NinjaScriptProperty] public double BetaDist { get; set; } = 0.7;
        [NinjaScriptProperty] public double BetaMom  { get; set; } = 0.5;
        [NinjaScriptProperty] public double BetaFluxo{ get; set; } = 1.2;

        [NinjaScriptProperty] public double MinProb     { get; set; } = 0.75;
        [NinjaScriptProperty] public int    CooldownBars{ get; set; } = 5;
        [NinjaScriptProperty] public int    SignalPoints{ get; set; } = 10;  // ¬°NUESTRO TP/SL EN PUNTOS!
        #endregion

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Description      = "ProbSignalPro v5 Fluxo: se√±ales con probabilidad y fuerza institucional + salida formateada";
                Name             = "ProbSignalPro_v5_Fluxo";
                Calculate        = Calculate.OnBarClose;
                IsOverlay        = true;
                AddPlot(Brushes.Transparent, "Dummy");
            }
            else if (State == State.DataLoaded)
            {
                ema = EMA(14);
                rsi = RSI(14, 1);
                atr = ATR(14);
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < 20) return;

            // 1) Calcular regresi√≥n log√≠stica + fluxo
            double emaSlope = (ema[0] - ema[1]) / TickSize;
            double rsiNorm  = rsi[0] / 100.0;
            double atrTicks = atr[0] / TickSize;
            double distTicks= Math.Abs(Close[0] - ema[0]) / TickSize;
            double momTicks = (Close[0] - Close[1]) / TickSize;
            double fluxo    = Math.Abs(Volume[0] - lastVolume)
                            + Math.Abs((Close[0] - Open[0]) / TickSize);
            lastVolume = Volume[0];

            double lin  = Beta0
                        + BetaEMA * emaSlope
                        + BetaRSI * rsiNorm
                        + BetaATR * atrTicks
                        + BetaDist* distTicks
                        + BetaMom * momTicks
                        + BetaFluxo* fluxo;
            double prob = 1 / (1 + Math.Exp(-lin));

            bool isLong  = prob >= MinProb && Close[0] > ema[0] && CurrentBar >= lastSignalBar + CooldownBars;
            bool isShort = prob >= MinProb && Close[0] < ema[0] && CurrentBar >= lastSignalBar + CooldownBars;

            // 2) Encolar nueva se√±al
            if (isLong || isShort)
            {
                pending.Add(new SignalData
                {
                    Bar         = CurrentBar,
                    IsLong      = isLong,
                    SignalTime  = Time[0],
                    SignalPrice = Close[0],
                    Done        = false
                });
                lastSignalBar = CurrentBar;

                // Dibujar tri√°ngulo
                if (isLong)
                    Draw.TriangleUp(this, $"TU{CurrentBar}", false, 0, Low[0] - 5*TickSize, Brushes.Lime);
                else
                    Draw.TriangleDown(this, $"TD{CurrentBar}", false, 0, High[0] + 5*TickSize, Brushes.Fuchsia);
            }

            // 3) Procesar se√±ales pendientes
            for (int i = pending.Count - 1; i >= 0; i--)
            {
                var sig = pending[i];
                if (sig.Done) continue;

                // Barra de entrada = sig.Bar + 1
                if (CurrentBar == sig.Bar + 1)
                {
                    // Capturar precio de apertura real
                    sig.EntryPrice = Open[0];
                    // Calcular niveles TP/SL
                    sig.TpPrice    = sig.EntryPrice + (sig.IsLong ? SignalPoints : -SignalPoints);
                    sig.SlPrice    = sig.EntryPrice - (sig.IsLong ? SignalPoints : -SignalPoints);
                    continue;
                }

                // Una vez pasada la barra de entrada, chequear TP/SL
                if (CurrentBar > sig.Bar + 1)
                {
                    bool hitTP = sig.IsLong ? High[0] >= sig.TpPrice : Low[0]  <= sig.TpPrice;
                    bool hitSL = sig.IsLong ? Low[0]  <= sig.SlPrice : High[0] >= sig.SlPrice;
                    if (!(hitTP || hitSL)) continue;

                    // Formateo de precios con coma decimal
                    Func<double,string> fmt = v =>
                        v.ToString("0.00", CultureInfo.InvariantCulture).Replace('.', ',');

                    // Construcci√≥n de la l√≠nea exacta
                    string output = string.Format(
                        "{0}={1} - Se√±al {2} Entrada={3} - TP={4} - SL={5} - Resultado={6}",
                        sig.IsLong ? "LONG" : "SHORT",
                        sig.SignalTime.ToString("HH:mm:ss"),
                        fmt(sig.SignalPrice),
                        fmt(sig.EntryPrice),
                        fmt(sig.TpPrice),
                        fmt(sig.SlPrice),
                        hitTP ? "TP" : "SL"
                    );

                    Print(output);
                    sig.Done = true;
                }
            }
        }
    }
}
