Solo muestra flechas de long pero coinciden con shark



// =============================================
// AlphaRenko_v2_diagnostic - Indicador de prueba de visibilidad de flechas (versi√≥n extendida)
// NinjaTrader 8 - Wicked Renko + verificaci√≥n din√°mica OnEachTick
// =============================================

#region Usings
using System;
using System.Windows.Media;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

namespace NinjaTrader.NinjaScript.Indicators
{
    public class AlphaRenko_v2_diagnostic : Indicator
    {
        private bool arrowDrawn = false;
        private int lastArrowBar = -20;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Name = "AlphaRenko_v2_diagnostic";
                Calculate = Calculate.OnEachTick;
                IsOverlay = true;
                DisplayInDataBox = false;
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < 30)
                return;

            // üîÑ Dibuja flechas LONG cada 20 barras
            if (CurrentBar - lastArrowBar >= 20)
            {
                Draw.ArrowUp(this, "upArrow" + CurrentBar, false, 0, Low[0] - 2 * TickSize, Brushes.Lime);
                Print($"‚úî FLECHA LONG en barra {CurrentBar} a las {Time[0]:HH:mm:ss} Precio={Low[0] - 2 * TickSize:F2}");
                lastArrowBar = CurrentBar;
                arrowDrawn = true;
            }

            // ‚úÖ Diagn√≥stico visual continuo
            if (arrowDrawn && CurrentBar % 10 == 0)
            {
                Draw.TextFixed(this, "flechaStatus", $"√öltima flecha: {Time[lastArrowBar]:HH:mm:ss}", TextPosition.TopLeft);
            }
        }
    }
}


#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private AlphaRenko_v2_diagnostic[] cacheAlphaRenko_v2_diagnostic;
		public AlphaRenko_v2_diagnostic AlphaRenko_v2_diagnostic()
		{
			return AlphaRenko_v2_diagnostic(Input);
		}

		public AlphaRenko_v2_diagnostic AlphaRenko_v2_diagnostic(ISeries<double> input)
		{
			if (cacheAlphaRenko_v2_diagnostic != null)
				for (int idx = 0; idx < cacheAlphaRenko_v2_diagnostic.Length; idx++)
					if (cacheAlphaRenko_v2_diagnostic[idx] != null &&  cacheAlphaRenko_v2_diagnostic[idx].EqualsInput(input))
						return cacheAlphaRenko_v2_diagnostic[idx];
			return CacheIndicator<AlphaRenko_v2_diagnostic>(new AlphaRenko_v2_diagnostic(), input, ref cacheAlphaRenko_v2_diagnostic);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.AlphaRenko_v2_diagnostic AlphaRenko_v2_diagnostic()
		{
			return indicator.AlphaRenko_v2_diagnostic(Input);
		}

		public Indicators.AlphaRenko_v2_diagnostic AlphaRenko_v2_diagnostic(ISeries<double> input )
		{
			return indicator.AlphaRenko_v2_diagnostic(input);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.AlphaRenko_v2_diagnostic AlphaRenko_v2_diagnostic()
		{
			return indicator.AlphaRenko_v2_diagnostic(Input);
		}

		public Indicators.AlphaRenko_v2_diagnostic AlphaRenko_v2_diagnostic(ISeries<double> input )
		{
			return indicator.AlphaRenko_v2_diagnostic(input);
		}
	}
}

#endregion
