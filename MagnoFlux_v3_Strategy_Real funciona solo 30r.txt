using System;
using System.Windows.Media;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.NinjaScript.Strategies;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;

namespace NinjaTrader.NinjaScript.Strategies
{
    public class MagnoFlux_v3_Strategy_Real : Strategy
    {
        private double avgVolume;
        private double speedScore;
        private double prevSpeedScore;
        private int lastSignalBar = -1000;
        private SignalData sig;

        // --- parametros configurables ---
        [NinjaScriptProperty] public int SignalPoints { get; set; } = 40;
        [NinjaScriptProperty] public int CooldownBars { get; set; } = 5;
        [NinjaScriptProperty] public int MinConditions { get; set; } = 4;
        [NinjaScriptProperty] public double VolumeThreshold { get; set; } = 1.8;
        [NinjaScriptProperty] public int SpeedTicks { get; set; } = 25;
        [NinjaScriptProperty] public double BodyContextRatio { get; set; } = 0.4;
        [NinjaScriptProperty] public double MinBodyRatio { get; set; } = 0.3;
        [NinjaScriptProperty] public double SlopeMin { get; set; } = 0.05;

        private ATR atrShort;
        private ATR atrLong;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Name = "MagnoFlux_v3_Strategy_Real";
                Calculate = Calculate.OnBarClose;
                IsOverlay = true;
            }
            else if (State == State.DataLoaded)
            {
                atrShort = ATR(1);
                atrLong = ATR(14);
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < 30)
                return;

            if (sig != null && !sig.Done && sig.EntryBar == CurrentBar && double.IsNaN(sig.EntryPrice))
            {
                ExecuteEntry();
            }

            if (sig != null && !sig.Done && CurrentBar > sig.EntryBar)
            {
                ManageOpenTrade();
            }

            if (CurrentBar <= lastSignalBar + CooldownBars || (sig != null && !sig.Done))
                return;

            double bodyNow = Math.Abs(Close[0] - Open[0]);
            if (bodyNow < (High[0] - Low[0]) * MinBodyRatio)
                return;

            UpdateMetrics();

            int filtros = 0;
            if (IsVolumeSpike()) filtros++;
            if (IsFastMove()) filtros++;
            if (IsImbalance()) filtros++;
            if (IsStrongTrap()) filtros++;
            if (IsContextOk()) filtros++;
            if (IsSustainedMomentum()) filtros++;

            bool bullish = Close[0] > Open[0];
            bool bearish = Close[0] < Open[0];
            bool filtroFPLEME = FplemeFilter();

            bool longCond = filtroFPLEME && filtros >= MinConditions && bullish && IsSustainedMomentum();
            bool shortCond = filtroFPLEME && filtros >= MinConditions && bearish && IsSustainedMomentum();

            if (longCond)
            {
                EnterSignal(true);
                lastSignalBar = CurrentBar;
            }
            else if (shortCond)
            {
                EnterSignal(false);
                lastSignalBar = CurrentBar;
            }
        }

        private void UpdateMetrics()
        {
            double volSum = 0;
            for (int i = 0; i < 14; i++)
                volSum += Volume[i];
            avgVolume = volSum / 14.0;

            speedScore = Math.Abs(Close[0] - Close[3]) / TickSize;
            prevSpeedScore = Math.Abs(Close[1] - Close[4]) / TickSize;
        }

        private bool IsVolumeSpike()
        {
            return Volume[0] > avgVolume * VolumeThreshold;
        }

        private bool IsFastMove()
        {
            return speedScore >= SpeedTicks;
        }

        private bool IsImbalance()
        {
            bool up = Close[0] > High[1] && Low[0] > Low[1];
            bool dn = Close[0] < Low[1] && High[0] < High[1];
            return up || dn;
        }

        private bool IsTrap()
        {
            bool bullTrap = High[1] > High[2] && Close[0] < Low[1];
            bool bearTrap = Low[1] < Low[2] && Close[0] > High[1];
            return bullTrap || bearTrap;
        }

        private bool IsStrongTrap()
        {
            if (!IsTrap())
                return false;

            bool strongVol = IsVolumeSpike();
            double range = High[0] - Low[0];
            bool largeRange = range > atrLong[0] * 1.2;
            return strongVol && largeRange;
        }

        private bool IsSustainedMomentum()
        {
            double move = Close[0] - Close[1];
            double prevMove = Close[1] - Close[2];
            bool sameDir = move * prevMove > 0;
            bool accelerating = Math.Abs(move) >= Math.Abs(prevMove);
            return sameDir && accelerating && Math.Abs(move) / TickSize >= SpeedTicks;
        }

        private bool IsContextOk()
        {
            double body = Math.Abs(Close[0] - Open[0]);
            return body > (High[0] - Low[0]) * BodyContextRatio;
        }

        private bool FplemeFilter()
        {
            double priceSlope = (Close[0] - Close[5]) / (5 * TickSize);
            double trNow = atrShort[0] / TickSize;
            double trAvg = atrLong[0] / TickSize;

            bool expansion = priceSlope > SlopeMin && trNow > trAvg * 1.1;
            bool absorption = trNow < trAvg * 0.7 && speedScore < prevSpeedScore;
            bool strongSpeed = speedScore >= 60;

            return expansion && strongSpeed && !absorption;
        }

        private void EnterSignal(bool isLong)
        {
            sig = new SignalData
            {
                Time = Time[0],
                EntryBar = CurrentBar + 1,
                EntryPrice = double.NaN,
                TP = 0,
                SL = 0,
                IsLong = isLong,
                Done = false
            };

            if (isLong)
                Draw.TriangleUp(this, "L" + CurrentBar, false, 0, Low[0] - TickSize, Brushes.Lime);
            else
                Draw.TriangleDown(this, "S" + CurrentBar, false, 0, High[0] + TickSize, Brushes.Red);

            Print($"SIGNAL={sig.Time:HH:mm:ss} - {(isLong ? "LONG" : "SHORT")} generada – entrada en próxima barra");
        }

        private void ExecuteEntry()
        {
            sig.EntryPrice = Open[0];
            sig.TP = sig.IsLong ? sig.EntryPrice + SignalPoints * TickSize : sig.EntryPrice - SignalPoints * TickSize;
            sig.SL = sig.IsLong ? sig.EntryPrice - SignalPoints * TickSize : sig.EntryPrice + SignalPoints * TickSize;

            if (sig.IsLong)
                EnterLong();
            else
                EnterShort();

            Print($"CONFIRM={sig.Time:HH:mm:ss} - {(sig.IsLong ? "LONG" : "SHORT")} Entrada={sig.EntryPrice:F2} TP={sig.TP:F2} SL={sig.SL:F2}");
        }

        private void ManageOpenTrade()
        {
            if (sig.IsLong && Low[0] <= sig.SL)
            {
                ExitLong();
                EndTrade("SL");
            }
            else if (sig.IsLong && High[0] >= sig.TP)
            {
                ExitLong();
                EndTrade("TP");
            }
            else if (!sig.IsLong && High[0] >= sig.SL)
            {
                ExitShort();
                EndTrade("SL");
            }
            else if (!sig.IsLong && Low[0] <= sig.TP)
            {
                ExitShort();
                EndTrade("TP");
            }
        }

        private void EndTrade(string result)
        {
            Print($"{result} en {Time[0]:HH:mm:ss}");
            sig.Done = true;
        }

        private class SignalData
        {
            public DateTime Time;
            public int EntryBar;
            public double EntryPrice;
            public double TP;
            public double SL;
            public bool IsLong;
            public bool Done;
        }
    }
}