SmartWickedRenkoV3Pro_Full mejorada 1

#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Windows.Media;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

namespace NinjaTrader.NinjaScript.Indicators
{
    public class SmartWickedRenkoV3Pro_Full : Indicator
    {
        private RSI rsi;
        private EMA ema;
        private ATR atr;
        private string lastSignalType = "";
        
        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Description = "Smart Wicked Renko V3 Pro Full Version";
                Name = "SmartWickedRenkoV3Pro_Full";
                EMAPeriod = 14;
                CooldownBars = 12;
                RSIPeriod = 14;
                RSIOversold = 30;
                RSIOverbought = 70;
                ATRPeriod = 3;
                ATRMultiplier = 0.75;
                MinimumScore = 75;
                SignalDirection = 0;
                ShowDebug = true;
                
                Calculate = Calculate.OnBarClose;
                IsOverlay = true;
                DisplayInDataBox = true;
                DrawOnPricePanel = true;
                DrawHorizontalGridLines = true;
                DrawVerticalGridLines = true;
                PaintPriceMarkers = true;
                ScaleJustification = NinjaTrader.Gui.Chart.ScaleJustification.Right;
                IsSuspendedWhileInactive = true;
            }
            else if (State == State.Configure)
            {
                AddPlot(new Stroke(Brushes.Gray, 2), PlotStyle.Line, "EMA");
                rsi = RSI(Close, RSIPeriod, 1);
                ema = EMA(Close, EMAPeriod);
                atr = ATR(ATRPeriod);
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < Math.Max(Math.Max(EMAPeriod, RSIPeriod), ATRPeriod))
                return;

            if (ShowDebug)
            {
                Print($"Bar: {CurrentBar} | Close: {Close[0]} | RSI: {rsi[0]:F2} | EMA: {ema[0]:F2}");
            }

            double score = 75; // Score fijo como en la versiÃ³n original
            
            if ((SignalDirection == 0 || SignalDirection == 1) && IsValidLongSignal(score))
            {
                if (lastSignalType != "LONG" || CurrentBar - LastSignalBar > CooldownBars)
                {
                    DrawLongSignal();
                    lastSignalType = "LONG";
                    if (ShowDebug)
                    {
                        Print($"LONG Signal | Price: {Close[0]} | Score: {score}");
                    }
                }
            }
            
            if ((SignalDirection == 0 || SignalDirection == 2) && IsValidShortSignal(score))
            {
                if (lastSignalType != "SHORT" || CurrentBar - LastSignalBar > CooldownBars)
                {
                    DrawShortSignal();
                    lastSignalType = "SHORT";
                    if (ShowDebug)
                    {
                        Print($"SHORT Signal | Price: {Close[0]} | Score: {score}");
                    }
                }
            }
        }

        private bool IsValidLongSignal(double score)
        {
            if (score < MinimumScore) return false;
            if (LastSignalBar + CooldownBars > CurrentBar) return false;
            
            bool priceAboveEma = Close[0] > ema[0];
            bool notOverbought = rsi[0] < RSIOverbought;
            bool priceIncreasing = Close[0] > Close[1];
            
            return priceAboveEma && notOverbought && priceIncreasing;
        }

        private bool IsValidShortSignal(double score)
        {
            if (score < MinimumScore) return false;
            if (LastSignalBar + CooldownBars > CurrentBar) return false;
            
            bool priceBelowEma = Close[0] < ema[0];
            bool notOversold = rsi[0] > RSIOversold;
            bool priceDecreasing = Close[0] < Close[1];
            
            return priceBelowEma && notOversold && priceDecreasing;
        }

        private void DrawLongSignal()
        {
            string priceInfo = string.Format("\nPrice: {0}", Close[0].ToString("N2"));
            Draw.ArrowUp(this, "Long_" + CurrentBar, false, 0, Low[0] - atr[0] * ATRMultiplier, Brushes.LimeGreen);
            Draw.Text(this, "LongText_" + CurrentBar, "LONG\nScore: 75" + priceInfo, 
                0, Low[0] - atr[0] * ATRMultiplier * 2);
            LastSignalBar = CurrentBar;
        }

        private void DrawShortSignal()
        {
            string priceInfo = string.Format("\nPrice: {0}", Close[0].ToString("N2"));
            Draw.ArrowDown(this, "Short_" + CurrentBar, false, 0, High[0] + atr[0] * ATRMultiplier, Brushes.Red);
            Draw.Text(this, "ShortText_" + CurrentBar, "SHORT\nScore: 75" + priceInfo, 
                0, High[0] + atr[0] * ATRMultiplier * 2);
            LastSignalBar = CurrentBar;
        }

        #region Properties
        [Range(1, int.MaxValue)]
        [NinjaScriptProperty]
        [Display(Name = "EMA Period", Description = "EMA Period", Order = 1, GroupName = "Parameters")]
        public int EMAPeriod { get; set; }

        [Range(1, int.MaxValue)]
        [NinjaScriptProperty]
        [Display(Name = "Cooldown Bars", Description = "Bars between signals", Order = 2, GroupName = "Parameters")]
        public int CooldownBars { get; set; }

        [Range(1, int.MaxValue)]
        [NinjaScriptProperty]
        [Display(Name = "RSI Period", Description = "RSI Period", Order = 3, GroupName = "Parameters")]
        public int RSIPeriod { get; set; }

        [Range(1, 100)]
        [NinjaScriptProperty]
        [Display(Name = "RSI Oversold", Description = "RSI Oversold level", Order = 4, GroupName = "Parameters")]
        public int RSIOversold { get; set; }

        [Range(1, 100)]
        [NinjaScriptProperty]
        [Display(Name = "RSI Overbought", Description = "RSI Overbought level", Order = 5, GroupName = "Parameters")]
        public int RSIOverbought { get; set; }

        [Range(1, int.MaxValue)]
        [NinjaScriptProperty]
        [Display(Name = "ATR Period", Description = "ATR Period", Order = 6, GroupName = "Parameters")]
        public int ATRPeriod { get; set; }

        [Range(0.1, 10)]
        [NinjaScriptProperty]
        [Display(Name = "ATR Multiplier", Description = "ATR Multiplier for signal placement", Order = 7, GroupName = "Parameters")]
        public double ATRMultiplier { get; set; }

        [Range(0, 100)]
        [NinjaScriptProperty]
        [Display(Name = "Minimum Score", Description = "Minimum score required for signals", Order = 8, GroupName = "Parameters")]
        public double MinimumScore { get; set; }

        [Range(0, 2)]
        [NinjaScriptProperty]
        [Display(Name = "Signal Type", Description = "Signal Type (0=Both, 1=LongOnly, 2=ShortOnly)", Order = 9, GroupName = "Parameters")]
        public int SignalDirection { get; set; }

        [NinjaScriptProperty]
        [Display(Name = "Show Debug", Description = "Show debug information in Output window", Order = 10, GroupName = "Parameters")]
        public bool ShowDebug { get; set; }

        private int LastSignalBar = 0;
        #endregion
    }
}

#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private SmartWickedRenkoV3Pro_Full[] cacheSmartWickedRenkoV3Pro_Full;
		public SmartWickedRenkoV3Pro_Full SmartWickedRenkoV3Pro_Full(int eMAPeriod, int cooldownBars, int rSIPeriod, int rSIOversold, int rSIOverbought, int aTRPeriod, double aTRMultiplier, double minimumScore, int signalDirection, bool showDebug)
		{
			return SmartWickedRenkoV3Pro_Full(Input, eMAPeriod, cooldownBars, rSIPeriod, rSIOversold, rSIOverbought, aTRPeriod, aTRMultiplier, minimumScore, signalDirection, showDebug);
		}

		public SmartWickedRenkoV3Pro_Full SmartWickedRenkoV3Pro_Full(ISeries<double> input, int eMAPeriod, int cooldownBars, int rSIPeriod, int rSIOversold, int rSIOverbought, int aTRPeriod, double aTRMultiplier, double minimumScore, int signalDirection, bool showDebug)
		{
			if (cacheSmartWickedRenkoV3Pro_Full != null)
				for (int idx = 0; idx < cacheSmartWickedRenkoV3Pro_Full.Length; idx++)
					if (cacheSmartWickedRenkoV3Pro_Full[idx] != null && cacheSmartWickedRenkoV3Pro_Full[idx].EMAPeriod == eMAPeriod && cacheSmartWickedRenkoV3Pro_Full[idx].CooldownBars == cooldownBars && cacheSmartWickedRenkoV3Pro_Full[idx].RSIPeriod == rSIPeriod && cacheSmartWickedRenkoV3Pro_Full[idx].RSIOversold == rSIOversold && cacheSmartWickedRenkoV3Pro_Full[idx].RSIOverbought == rSIOverbought && cacheSmartWickedRenkoV3Pro_Full[idx].ATRPeriod == aTRPeriod && cacheSmartWickedRenkoV3Pro_Full[idx].ATRMultiplier == aTRMultiplier && cacheSmartWickedRenkoV3Pro_Full[idx].MinimumScore == minimumScore && cacheSmartWickedRenkoV3Pro_Full[idx].SignalDirection == signalDirection && cacheSmartWickedRenkoV3Pro_Full[idx].ShowDebug == showDebug && cacheSmartWickedRenkoV3Pro_Full[idx].EqualsInput(input))
						return cacheSmartWickedRenkoV3Pro_Full[idx];
			return CacheIndicator<SmartWickedRenkoV3Pro_Full>(new SmartWickedRenkoV3Pro_Full(){ EMAPeriod = eMAPeriod, CooldownBars = cooldownBars, RSIPeriod = rSIPeriod, RSIOversold = rSIOversold, RSIOverbought = rSIOverbought, ATRPeriod = aTRPeriod, ATRMultiplier = aTRMultiplier, MinimumScore = minimumScore, SignalDirection = signalDirection, ShowDebug = showDebug }, input, ref cacheSmartWickedRenkoV3Pro_Full);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.SmartWickedRenkoV3Pro_Full SmartWickedRenkoV3Pro_Full(int eMAPeriod, int cooldownBars, int rSIPeriod, int rSIOversold, int rSIOverbought, int aTRPeriod, double aTRMultiplier, double minimumScore, int signalDirection, bool showDebug)
		{
			return indicator.SmartWickedRenkoV3Pro_Full(Input, eMAPeriod, cooldownBars, rSIPeriod, rSIOversold, rSIOverbought, aTRPeriod, aTRMultiplier, minimumScore, signalDirection, showDebug);
		}

		public Indicators.SmartWickedRenkoV3Pro_Full SmartWickedRenkoV3Pro_Full(ISeries<double> input , int eMAPeriod, int cooldownBars, int rSIPeriod, int rSIOversold, int rSIOverbought, int aTRPeriod, double aTRMultiplier, double minimumScore, int signalDirection, bool showDebug)
		{
			return indicator.SmartWickedRenkoV3Pro_Full(input, eMAPeriod, cooldownBars, rSIPeriod, rSIOversold, rSIOverbought, aTRPeriod, aTRMultiplier, minimumScore, signalDirection, showDebug);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.SmartWickedRenkoV3Pro_Full SmartWickedRenkoV3Pro_Full(int eMAPeriod, int cooldownBars, int rSIPeriod, int rSIOversold, int rSIOverbought, int aTRPeriod, double aTRMultiplier, double minimumScore, int signalDirection, bool showDebug)
		{
			return indicator.SmartWickedRenkoV3Pro_Full(Input, eMAPeriod, cooldownBars, rSIPeriod, rSIOversold, rSIOverbought, aTRPeriod, aTRMultiplier, minimumScore, signalDirection, showDebug);
		}

		public Indicators.SmartWickedRenkoV3Pro_Full SmartWickedRenkoV3Pro_Full(ISeries<double> input , int eMAPeriod, int cooldownBars, int rSIPeriod, int rSIOversold, int rSIOverbought, int aTRPeriod, double aTRMultiplier, double minimumScore, int signalDirection, bool showDebug)
		{
			return indicator.SmartWickedRenkoV3Pro_Full(input, eMAPeriod, cooldownBars, rSIPeriod, rSIOversold, rSIOverbought, aTRPeriod, aTRMultiplier, minimumScore, signalDirection, showDebug);
		}
	}
}

#endregion
