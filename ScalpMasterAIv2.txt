ScalpMasterAIv267,8 %

Total de señales: 2 528

TP (ganadoras): 1 714

SL (perdedoras): 808

Tasa de acierto: 67,8 %





// ScalpMasterAI_v2 - Intrabar exit en OnBarUpdate con Calculate.OnEachTick
#region Usings
using System;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Windows.Media;
using NinjaTrader.Data;
using NinjaTrader.Gui.Tools;
using NinjaTrader.NinjaScript;
using NinjaTrader.NinjaScript.DrawingTools;
using NinjaTrader.NinjaScript.Indicators;
#endregion

namespace NinjaTrader.NinjaScript.Indicators
{
    public class ScalpMasterAI_v2 : Indicator
    {
        // Parámetros personalizables
        [NinjaScriptProperty]
        [Range(1, int.MaxValue)]
        [Display(Name = "SignalPoints", GroupName = "Parameters", Order = 0)]
        public int SignalPoints { get; set; } = 10;

        [NinjaScriptProperty]
        [Range(1, int.MaxValue)]
        [Display(Name = "CooldownBars", GroupName = "Parameters", Order = 1)]
        public int CooldownBars { get; set; } = 1;

        [NinjaScriptProperty]
        [Range(1, 500)]
        [Display(Name = "MinVolPct", GroupName = "Parameters", Order = 2)]
        public double MinVolPct { get; set; } = 120;

        [NinjaScriptProperty]
        [Range(1, 100)]
        [Display(Name = "MinAtrTicks", GroupName = "Parameters", Order = 3)]
        public int MinAtrTicks { get; set; } = 4;

        // Indicadores internos
        private SMA smaPrice;
        private SMA smaVol;
        private RSI rsi;
        private ATR atr;

        // Estado de la operación
        private bool inTrade;
        private int lastSignalBar;
        private int entryBar;
        private string direction;
        private DateTime signalTime;
        private double signalPrice;
        private double entryPrice;
        private double tpPrice;
        private double slPrice;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Name = "ScalpMasterAI_v2";
                Calculate = Calculate.OnEachTick;
                IsOverlay = true;
                DisplayInDataBox = false;
            }
            else if (State == State.DataLoaded)
            {
                smaPrice      = SMA(14);
                smaVol        = SMA(Volume, 20);
                rsi           = RSI(5, 1);
                atr           = ATR(14);
                inTrade       = false;
                lastSignalBar = -CooldownBars;
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < 20)
                return;

            // Gestión intrabarra si existe trade abierto
            if (inTrade)
            {
                // Establecer niveles en la primera barra de entrada
                if (CurrentBar == entryBar)
                {
                    entryPrice = Open[0];
                    tpPrice    = direction == "LONG"
                        ? entryPrice + SignalPoints * TickSize
                        : entryPrice - SignalPoints * TickSize;
                    slPrice    = direction == "LONG"
                        ? entryPrice - SignalPoints * TickSize
                        : entryPrice + SignalPoints * TickSize;
                }

                // Precio actual en este tick
                double price = Close[0];

                // Priorizar SL sobre TP
                if (direction == "LONG")
                {
                    if (price <= slPrice)
                        ExitTrade("SL", price);
                    else if (price >= tpPrice)
                        ExitTrade("TP", price);
                }
                else // SHORT
                {
                    if (price >= slPrice)
                        ExitTrade("SL", price);
                    else if (price <= tpPrice)
                        ExitTrade("TP", price);
                }

                return;
            }

            // Cooldown entre señales
            if (CurrentBar <= lastSignalBar + CooldownBars)
                return;

            // Filtros técnicos
            bool volOK      = Volume[0] >= smaVol[0] * (MinVolPct / 100.0);
            bool atrOK      = atr[0] / TickSize >= MinAtrTicks;
            bool rsiOKLong  = rsi[0] > 50;
            bool rsiOKShort = rsi[0] < 50;

            // Detección de cruce SMA(14)
            if (CrossAbove(Close, smaPrice, 1) && volOK && atrOK && rsiOKLong)
                TriggerSignal("LONG");
            else if (CrossBelow(Close, smaPrice, 1) && volOK && atrOK && rsiOKShort)
                TriggerSignal("SHORT");
        }

        private void TriggerSignal(string dir)
        {
            direction      = dir;
            signalTime     = Time[0];
            signalPrice    = Close[0];
            entryBar       = CurrentBar + 1;
            inTrade        = true;
            lastSignalBar  = CurrentBar;

            // Dibujar flecha en gráfica
            if (direction == "LONG")
                Draw.ArrowUp(this, "long" + CurrentBar, false, 0, Low[0] - 2 * TickSize, Brushes.Lime);
            else
                Draw.ArrowDown(this, "short" + CurrentBar, false, 0, High[0] + 2 * TickSize, Brushes.Red);
        }

        private void ExitTrade(string result, double exitPrice)
        {
            // Formatear con coma decimal
            string fmt(double v) => v.ToString("0.00", CultureInfo.InvariantCulture).Replace('.', ',');
            Print($"{direction}={signalTime:HH:mm:ss} - Señal {fmt(signalPrice)} Entrada={fmt(entryPrice)} - TP={fmt(tpPrice)} - SL={fmt(slPrice)} - Resultado={result}@{fmt(exitPrice)}");
            inTrade = false;
        }
    }
}


#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private ScalpMasterAI_v2[] cacheScalpMasterAI_v2;
		public ScalpMasterAI_v2 ScalpMasterAI_v2(int signalPoints, int cooldownBars, double minVolPct, int minAtrTicks)
		{
			return ScalpMasterAI_v2(Input, signalPoints, cooldownBars, minVolPct, minAtrTicks);
		}

		public ScalpMasterAI_v2 ScalpMasterAI_v2(ISeries<double> input, int signalPoints, int cooldownBars, double minVolPct, int minAtrTicks)
		{
			if (cacheScalpMasterAI_v2 != null)
				for (int idx = 0; idx < cacheScalpMasterAI_v2.Length; idx++)
					if (cacheScalpMasterAI_v2[idx] != null && cacheScalpMasterAI_v2[idx].SignalPoints == signalPoints && cacheScalpMasterAI_v2[idx].CooldownBars == cooldownBars && cacheScalpMasterAI_v2[idx].MinVolPct == minVolPct && cacheScalpMasterAI_v2[idx].MinAtrTicks == minAtrTicks && cacheScalpMasterAI_v2[idx].EqualsInput(input))
						return cacheScalpMasterAI_v2[idx];
			return CacheIndicator<ScalpMasterAI_v2>(new ScalpMasterAI_v2(){ SignalPoints = signalPoints, CooldownBars = cooldownBars, MinVolPct = minVolPct, MinAtrTicks = minAtrTicks }, input, ref cacheScalpMasterAI_v2);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.ScalpMasterAI_v2 ScalpMasterAI_v2(int signalPoints, int cooldownBars, double minVolPct, int minAtrTicks)
		{
			return indicator.ScalpMasterAI_v2(Input, signalPoints, cooldownBars, minVolPct, minAtrTicks);
		}

		public Indicators.ScalpMasterAI_v2 ScalpMasterAI_v2(ISeries<double> input , int signalPoints, int cooldownBars, double minVolPct, int minAtrTicks)
		{
			return indicator.ScalpMasterAI_v2(input, signalPoints, cooldownBars, minVolPct, minAtrTicks);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.ScalpMasterAI_v2 ScalpMasterAI_v2(int signalPoints, int cooldownBars, double minVolPct, int minAtrTicks)
		{
			return indicator.ScalpMasterAI_v2(Input, signalPoints, cooldownBars, minVolPct, minAtrTicks);
		}

		public Indicators.ScalpMasterAI_v2 ScalpMasterAI_v2(ISeries<double> input , int signalPoints, int cooldownBars, double minVolPct, int minAtrTicks)
		{
			return indicator.ScalpMasterAI_v2(input, signalPoints, cooldownBars, minVolPct, minAtrTicks);
		}
	}
}

#endregion
