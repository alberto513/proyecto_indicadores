//----------------------------------------------------------------------------
// MagnoFluxScalperStrategy.cs
//----------------------------------------------------------------------------
// Estrategia optimizada para scalping con MagnoFlux_v3 (solo LONG) y ventana 10:30–13:00
//----------------------------------------------------------------------------

using System;
using NinjaTrader.NinjaScript;
using NinjaTrader.NinjaScript.Strategies;

namespace NinjaTrader.NinjaScript.Strategies
{
    public class MagnoFluxScalperStrategy : Strategy
    {
        // Gestión de riesgo scalper
        [NinjaScriptProperty] public int StopLossTicks { get; set; } = 40;
        [NinjaScriptProperty] public int ProfitTargetTicks { get; set; } = 44;  // R:R = 1:1.1
        [NinjaScriptProperty] public int CooldownBars { get; set; } = 1;

        // Filtros escalados para scalping
        [NinjaScriptProperty] public int MinConditions    { get; set; } = 2;
        [NinjaScriptProperty] public double VolumeThreshold { get; set; } = 1.3;
        [NinjaScriptProperty] public int SpeedTicks       { get; set; } = 18;
        [NinjaScriptProperty] public double BodyContextRatio { get; set; } = 0.3;
        [NinjaScriptProperty] public double SlopeMin         { get; set; } = 0.03;

        private int    lastSignalBar = -1000;
        private TimeSpan sessionStart = TimeSpan.Parse("10:00");
        private TimeSpan sessionEnd   = TimeSpan.Parse("13:00");

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Name      = "MagnoFluxScalperStrategy";
                Calculate = Calculate.OnBarClose;
            }
            else if (State == State.Configure)
            {
                SetStopLoss(CalculationMode.Ticks, StopLossTicks);
                SetProfitTarget(CalculationMode.Ticks, ProfitTargetTicks);
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < 20 || CurrentBar <= lastSignalBar + CooldownBars)
                return;

            // Ventana de trading
            var now = Time[0].TimeOfDay;
            if (now < sessionStart || now > sessionEnd)
                return;

            // Filtros simples
            double avgVol   = SMA(Volume, 10)[0];
            bool volSpike   = Volume[0] > avgVol * VolumeThreshold;

            double fastMove = Math.Abs(Close[0] - Close[2]) / TickSize;
            bool speedOk    = fastMove >= SpeedTicks;

            double body     = Math.Abs(Close[0] - Open[0]);
            bool contextOk  = body > (High[0] - Low[0]) * BodyContextRatio;

            int count = 0;
            if (volSpike)  count++;
            if (speedOk)   count++;
            if (contextOk) count++;

            // Proxy FPLEME ligero
            double slope   = (EMA(14)[0] - EMA(14)[3]) / (3 * TickSize);
            bool upTrend   = slope > SlopeMin;

            // Señal LONG
            if (upTrend && count >= MinConditions && Close[0] > Open[0])
            {
                EnterLong();
                lastSignalBar = CurrentBar;
            }
        }
    }
}
