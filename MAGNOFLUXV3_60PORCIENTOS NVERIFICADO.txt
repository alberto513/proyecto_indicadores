//----------------------------------------------------------------------------
// MagnoFluxScalperIndicator.cs
//----------------------------------------------------------------------------
// Indicador basado en lógica scalping MagnoFluxScalperStrategy,
// marca señales LONG en el chart y registra la hora de señal en la salida
// Ahora incluye parámetros de SL y TP editables en el panel de propiedades
//----------------------------------------------------------------------------

using System;
using System.Windows.Media;
using NinjaTrader.NinjaScript;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;
using NinjaTrader.Data;

namespace NinjaTrader.NinjaScript.Indicators
{
    public class MagnoFluxScalperIndicator : Indicator
    {
        // === Configuración de filtros ===
        [NinjaScriptProperty] public int CooldownBars       { get; set; } = 1;
        [NinjaScriptProperty] public int MinConditions      { get; set; } = 2;
        [NinjaScriptProperty] public double VolumeThreshold { get; set; } = 1.3;
        [NinjaScriptProperty] public int SpeedTicks         { get; set; } = 18;
        [NinjaScriptProperty] public double BodyContextRatio { get; set; } = 0.3;
        [NinjaScriptProperty] public double SlopeMin         { get; set; } = 0.03;
        [NinjaScriptProperty] public string SessionStart     { get; set; } = "10:30";
        [NinjaScriptProperty] public string SessionEnd       { get; set; } = "13:00";

        // === Configuración de SL y TP ===
        [NinjaScriptProperty] public int StopLossTicks      { get; set; } = 40; // Cambia aquí el SL en ticks
        [NinjaScriptProperty] public int ProfitTargetTicks  { get; set; } = 28; // Cambia aquí el TP en ticks

        private int lastSignalBar = -1000;
        private TimeSpan sessionStart;
        private TimeSpan sessionEnd;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Name             = "MagnoFluxScalperIndicator";
                Calculate        = Calculate.OnBarClose;
                IsOverlay        = true;
                DisplayInDataBox = false;
            }
            else if (State == State.Configure)
            {
                sessionStart = TimeSpan.Parse(SessionStart);
                sessionEnd   = TimeSpan.Parse(SessionEnd);
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < 20 || CurrentBar <= lastSignalBar + CooldownBars)
                return;

            var now = Time[0].TimeOfDay;
            if (now < sessionStart || now > sessionEnd)
                return;

            // 1) filtros: volumen, rapidez, cuerpo
            double avgVol    = SMA(Volume, 10)[0];
            bool volSpike    = Volume[0] > avgVol * VolumeThreshold;
            double fastMove  = Math.Abs(Close[0] - Close[2]) / TickSize;
            bool speedOk     = fastMove >= SpeedTicks;
            double bodySize  = Math.Abs(Close[0] - Open[0]);
            bool contextOk   = bodySize > (High[0] - Low[0]) * BodyContextRatio;

            int passCount = 0;
            if (volSpike)  passCount++;
            if (speedOk)   passCount++;
            if (contextOk) passCount++;

            // 2) pendiente EMA(14)
            double slope    = (EMA(14)[0] - EMA(14)[3]) / (3 * TickSize);
            bool upTrend    = slope > SlopeMin;

            // 3) señal LONG
            if (upTrend && passCount >= MinConditions && Close[0] > Open[0])
            {
                // Registrar hora y niveles en Output Window
                Print($"{Time[0]:HH:mm:ss} - Signal LONG | TP: {ProfitTargetTicks} ticks | SL: {StopLossTicks} ticks");

                // Dibujar solo flecha de señal
                Draw.ArrowUp(this, "mfscalp_" + CurrentBar, true, 0, Low[0] - TickSize, Brushes.Lime);

                lastSignalBar = CurrentBar;
            }
        }
    }
}


#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private MagnoFluxScalperIndicator[] cacheMagnoFluxScalperIndicator;
		public MagnoFluxScalperIndicator MagnoFluxScalperIndicator(int cooldownBars, int minConditions, double volumeThreshold, int speedTicks, double bodyContextRatio, double slopeMin, string sessionStart, string sessionEnd, int stopLossTicks, int profitTargetTicks)
		{
			return MagnoFluxScalperIndicator(Input, cooldownBars, minConditions, volumeThreshold, speedTicks, bodyContextRatio, slopeMin, sessionStart, sessionEnd, stopLossTicks, profitTargetTicks);
		}

		public MagnoFluxScalperIndicator MagnoFluxScalperIndicator(ISeries<double> input, int cooldownBars, int minConditions, double volumeThreshold, int speedTicks, double bodyContextRatio, double slopeMin, string sessionStart, string sessionEnd, int stopLossTicks, int profitTargetTicks)
		{
			if (cacheMagnoFluxScalperIndicator != null)
				for (int idx = 0; idx < cacheMagnoFluxScalperIndicator.Length; idx++)
					if (cacheMagnoFluxScalperIndicator[idx] != null && cacheMagnoFluxScalperIndicator[idx].CooldownBars == cooldownBars && cacheMagnoFluxScalperIndicator[idx].MinConditions == minConditions && cacheMagnoFluxScalperIndicator[idx].VolumeThreshold == volumeThreshold && cacheMagnoFluxScalperIndicator[idx].SpeedTicks == speedTicks && cacheMagnoFluxScalperIndicator[idx].BodyContextRatio == bodyContextRatio && cacheMagnoFluxScalperIndicator[idx].SlopeMin == slopeMin && cacheMagnoFluxScalperIndicator[idx].SessionStart == sessionStart && cacheMagnoFluxScalperIndicator[idx].SessionEnd == sessionEnd && cacheMagnoFluxScalperIndicator[idx].StopLossTicks == stopLossTicks && cacheMagnoFluxScalperIndicator[idx].ProfitTargetTicks == profitTargetTicks && cacheMagnoFluxScalperIndicator[idx].EqualsInput(input))
						return cacheMagnoFluxScalperIndicator[idx];
			return CacheIndicator<MagnoFluxScalperIndicator>(new MagnoFluxScalperIndicator(){ CooldownBars = cooldownBars, MinConditions = minConditions, VolumeThreshold = volumeThreshold, SpeedTicks = speedTicks, BodyContextRatio = bodyContextRatio, SlopeMin = slopeMin, SessionStart = sessionStart, SessionEnd = sessionEnd, StopLossTicks = stopLossTicks, ProfitTargetTicks = profitTargetTicks }, input, ref cacheMagnoFluxScalperIndicator);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.MagnoFluxScalperIndicator MagnoFluxScalperIndicator(int cooldownBars, int minConditions, double volumeThreshold, int speedTicks, double bodyContextRatio, double slopeMin, string sessionStart, string sessionEnd, int stopLossTicks, int profitTargetTicks)
		{
			return indicator.MagnoFluxScalperIndicator(Input, cooldownBars, minConditions, volumeThreshold, speedTicks, bodyContextRatio, slopeMin, sessionStart, sessionEnd, stopLossTicks, profitTargetTicks);
		}

		public Indicators.MagnoFluxScalperIndicator MagnoFluxScalperIndicator(ISeries<double> input , int cooldownBars, int minConditions, double volumeThreshold, int speedTicks, double bodyContextRatio, double slopeMin, string sessionStart, string sessionEnd, int stopLossTicks, int profitTargetTicks)
		{
			return indicator.MagnoFluxScalperIndicator(input, cooldownBars, minConditions, volumeThreshold, speedTicks, bodyContextRatio, slopeMin, sessionStart, sessionEnd, stopLossTicks, profitTargetTicks);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.MagnoFluxScalperIndicator MagnoFluxScalperIndicator(int cooldownBars, int minConditions, double volumeThreshold, int speedTicks, double bodyContextRatio, double slopeMin, string sessionStart, string sessionEnd, int stopLossTicks, int profitTargetTicks)
		{
			return indicator.MagnoFluxScalperIndicator(Input, cooldownBars, minConditions, volumeThreshold, speedTicks, bodyContextRatio, slopeMin, sessionStart, sessionEnd, stopLossTicks, profitTargetTicks);
		}

		public Indicators.MagnoFluxScalperIndicator MagnoFluxScalperIndicator(ISeries<double> input , int cooldownBars, int minConditions, double volumeThreshold, int speedTicks, double bodyContextRatio, double slopeMin, string sessionStart, string sessionEnd, int stopLossTicks, int profitTargetTicks)
		{
			return indicator.MagnoFluxScalperIndicator(input, cooldownBars, minConditions, volumeThreshold, speedTicks, bodyContextRatio, slopeMin, sessionStart, sessionEnd, stopLossTicks, profitTargetTicks);
		}
	}
}

#endregion
