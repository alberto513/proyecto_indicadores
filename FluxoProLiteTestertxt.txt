// =============================================
// FluxoProLiteTester - Indicador institucional base (versi칩n corregida)
// NinjaTrader 8 - Wicked Renko + Output CSV confiable y funcional
// =============================================

#region Usings
using System;
using System.IO;
using System.Windows.Media;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

namespace NinjaTrader.NinjaScript.Indicators
{
    public class FluxoProLiteTester : Indicator
    {
        private string filePath;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Name = "FluxoProLiteTester";
                Calculate = Calculate.OnBarClose;
                IsOverlay = true;
            }
            else if (State == State.Configure)
            {
                filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments),
                                        "NinjaTrader 8", "fluxo_signals_lite.csv");
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < 3)
                return;

            bool isReversalLong = Close[2] < Open[2] && Close[1] < Open[1] && Close[0] > Open[0];
            bool isReversalShort = Close[2] > Open[2] && Close[1] > Open[1] && Close[0] < Open[0];

            if (!isReversalLong && !isReversalShort)
                return;

            bool isLong = isReversalLong;
            double entry = Open[1];
            double tp = entry + (isLong ? 66 * TickSize : -66 * TickSize);
            double sl = entry - (isLong ? 66 * TickSize : -66 * TickSize);
            string hora = Time[1].ToString("HH:mm:ss");
            string precioSe침al = Close[0].ToString("F2");
            string dir = isLong ? "LONG" : "SHORT";

            if (isLong)
                Draw.ArrowUp(this, "long" + CurrentBar, false, 1, Low[1] - 2 * TickSize, Brushes.LimeGreen);
            else
                Draw.ArrowDown(this, "short" + CurrentBar, false, 1, High[1] + 2 * TickSize, Brushes.Red);

            string linea = $"{dir}={hora} - Se침al {precioSe침al} Entrada={entry:F2} - TP={tp:F2} - SL={sl:F2} - Resultado=";
            File.AppendAllText(filePath, linea + Environment.NewLine);
            Print(linea);
        }
    }
}