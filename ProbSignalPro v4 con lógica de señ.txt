// ProbSignalPro v4: con lógica de señal reforzada y filtro de señales dudosas

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Windows.Media;
using NinjaTrader.NinjaScript;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.Data;
using NinjaTrader.Gui.Chart;
using NinjaTrader.NinjaScript.DrawingTools;

namespace NinjaTrader.NinjaScript.Indicators
{
    public class ProbSignalPro_v4_Color : Indicator
    {
        private EMA ema;
        private RSI rsi;
        private ATR atr;
        private int lastSignalBar = -1000;
        private class SigInfo {
            public int Bar;
            public bool IsLong;
            public double Entry;
            public bool Done;
            public bool Reforzada;
        }
        private List<SigInfo> pending = new List<SigInfo>();

        #region Parámetros
        [NinjaScriptProperty] public double Beta0 { get; set; } = -1.234;
        [NinjaScriptProperty] public double BetaEmaSlope { get; set; } = 0.567;
        [NinjaScriptProperty] public double BetaRsiNorm { get; set; } = 0.345;
        [NinjaScriptProperty] public double BetaAtrNorm { get; set; } = -0.123;
        [NinjaScriptProperty] public double BetaDistEmaNorm { get; set; } = 0.789;
        [NinjaScriptProperty] public double BetaMomNorm { get; set; } = 0.456;

        [NinjaScriptProperty, Range(0, 1)] public double MinProb { get; set; } = 0.75;
        [NinjaScriptProperty] public int MinMomTicks { get; set; } = 10;
        [NinjaScriptProperty] public int MinEmaSlopeTicks { get; set; } = 2;
        [NinjaScriptProperty] public int MinDistTicks { get; set; } = 10;
        [NinjaScriptProperty] public bool UseRSIFilter { get; set; } = true;
        [NinjaScriptProperty, Range(0.0, 1.0)] public double RSIThreshold { get; set; } = 0.5;

        [NinjaScriptProperty] public int CooldownBars { get; set; } = 5;
        [NinjaScriptProperty] public int TpTicks { get; set; } = 40;
        [NinjaScriptProperty] public int SlTicks { get; set; } = 40;

        [NinjaScriptProperty] public bool FiltrarSenalesDudosas { get; set; } = true;
        #endregion

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Description = "ProbSignalPro v4 (colores vivos): señales reforzadas y filtrado basado en análisis profundo.";
                Name = "ProbSignalPro_v4_Color";
                Calculate = Calculate.OnBarClose;
                IsOverlay = true;
                AddPlot(Brushes.Transparent, "Dummy");
            }
            else if (State == State.DataLoaded)
            {
                ema = EMA(14);
                rsi = RSI(14, 1);
                atr = ATR(14);
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < 20) return;

            double emaSlope = (ema[0] - ema[1]) / TickSize;
            double rsiNorm = rsi[0] / 100.0;
            double atrTicks = atr[0] / TickSize;
            double distTicks = Math.Abs(Close[0] - ema[0]) / TickSize;
            double momTicks = (Close[0] - Close[1]) / TickSize;

            double lin = Beta0 + BetaEmaSlope * emaSlope + BetaRsiNorm * rsiNorm + BetaAtrNorm * atrTicks + BetaDistEmaNorm * distTicks + BetaMomNorm * momTicks;
            double prob = 1 / (1 + Math.Exp(-lin));

            bool isLong = prob >= MinProb && Close[0] > ema[0] && CurrentBar >= lastSignalBar + CooldownBars;
            bool isShort = prob >= MinProb && Close[0] < ema[0] && CurrentBar >= lastSignalBar + CooldownBars;

            if (isLong || isShort)
            {
                bool momOK = isLong ? momTicks >= MinMomTicks : momTicks <= -MinMomTicks;
                bool emaOK = isLong ? emaSlope >= MinEmaSlopeTicks : emaSlope <= -MinEmaSlopeTicks;
                bool distOK = distTicks >= MinDistTicks;
                bool rsiOK = !UseRSIFilter || (isLong ? rsiNorm >= RSIThreshold : rsiNorm <= 1 - RSIThreshold);

                bool esReforzada = prob >= 0.90 && distTicks > 35 && emaSlope > 0;
                bool dudosa = prob < 0.75 || distTicks < 20 || (isLong ? momTicks < 0 : momTicks > 0);

                if (momOK && emaOK && distOK && rsiOK)
                {
                    if (FiltrarSenalesDudosas && dudosa)
                        return;

                    int bar = CurrentBar;
                    double entry = Open[0];
                    pending.Add(new SigInfo { Bar = bar, IsLong = isLong, Entry = entry, Reforzada = esReforzada });
                    lastSignalBar = bar;

                    if (esReforzada)
                    {
                        if (isLong)
                            Draw.TriangleUp(this, $"R{bar}", false, 0, Low[0] - atr[0], Brushes.Yellow);
                        else
                            Draw.TriangleDown(this, $"R{bar}", false, 0, High[0] + atr[0], Brushes.Magenta);
                    }
                    else
                    {
                        if (isLong)
                            Draw.ArrowUp(this, $"L{bar}", false, 0, Low[0] - atr[0] * 0.5, Brushes.DeepSkyBlue);
                        else
                            Draw.ArrowDown(this, $"S{bar}", false, 0, High[0] + atr[0] * 0.5, Brushes.OrangeRed);
                    }
                }
            }

            foreach (var s in pending)
            {
                if (s.Done) continue;
                bool tp = s.IsLong ? High[0] >= s.Entry + TpTicks * TickSize : Low[0] <= s.Entry - TpTicks * TickSize;
                bool sl = s.IsLong ? Low[0] <= s.Entry - SlTicks * TickSize : High[0] >= s.Entry + SlTicks * TickSize;
                if (tp || sl || CurrentBar >= s.Bar + CooldownBars)
                {
                    s.Done = true;
                    string res = tp ? "TP" : "SL";
                    string tipo = s.Reforzada ? "REFORZADA" : "NORMAL";
                    Print($"{Time[s.Bar]:HH:mm:ss} - {(s.IsLong ? "LONG" : "SHORT")} - P(TP)={prob:P1} - EMAticks={emaSlope:F1} - RSIn={rsiNorm:F2} - ATRticks={atrTicks:F1} - DistTicks={distTicks:F1} - MomTicks={momTicks:F1} - Resultado={res} - {tipo}");
                }
            }
        }
    }
}


#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private ProbSignalPro_v4_Color[] cacheProbSignalPro_v4_Color;
		public ProbSignalPro_v4_Color ProbSignalPro_v4_Color(double beta0, double betaEmaSlope, double betaRsiNorm, double betaAtrNorm, double betaDistEmaNorm, double betaMomNorm, double minProb, int minMomTicks, int minEmaSlopeTicks, int minDistTicks, bool useRSIFilter, double rSIThreshold, int cooldownBars, int tpTicks, int slTicks, bool filtrarSenalesDudosas)
		{
			return ProbSignalPro_v4_Color(Input, beta0, betaEmaSlope, betaRsiNorm, betaAtrNorm, betaDistEmaNorm, betaMomNorm, minProb, minMomTicks, minEmaSlopeTicks, minDistTicks, useRSIFilter, rSIThreshold, cooldownBars, tpTicks, slTicks, filtrarSenalesDudosas);
		}

		public ProbSignalPro_v4_Color ProbSignalPro_v4_Color(ISeries<double> input, double beta0, double betaEmaSlope, double betaRsiNorm, double betaAtrNorm, double betaDistEmaNorm, double betaMomNorm, double minProb, int minMomTicks, int minEmaSlopeTicks, int minDistTicks, bool useRSIFilter, double rSIThreshold, int cooldownBars, int tpTicks, int slTicks, bool filtrarSenalesDudosas)
		{
			if (cacheProbSignalPro_v4_Color != null)
				for (int idx = 0; idx < cacheProbSignalPro_v4_Color.Length; idx++)
					if (cacheProbSignalPro_v4_Color[idx] != null && cacheProbSignalPro_v4_Color[idx].Beta0 == beta0 && cacheProbSignalPro_v4_Color[idx].BetaEmaSlope == betaEmaSlope && cacheProbSignalPro_v4_Color[idx].BetaRsiNorm == betaRsiNorm && cacheProbSignalPro_v4_Color[idx].BetaAtrNorm == betaAtrNorm && cacheProbSignalPro_v4_Color[idx].BetaDistEmaNorm == betaDistEmaNorm && cacheProbSignalPro_v4_Color[idx].BetaMomNorm == betaMomNorm && cacheProbSignalPro_v4_Color[idx].MinProb == minProb && cacheProbSignalPro_v4_Color[idx].MinMomTicks == minMomTicks && cacheProbSignalPro_v4_Color[idx].MinEmaSlopeTicks == minEmaSlopeTicks && cacheProbSignalPro_v4_Color[idx].MinDistTicks == minDistTicks && cacheProbSignalPro_v4_Color[idx].UseRSIFilter == useRSIFilter && cacheProbSignalPro_v4_Color[idx].RSIThreshold == rSIThreshold && cacheProbSignalPro_v4_Color[idx].CooldownBars == cooldownBars && cacheProbSignalPro_v4_Color[idx].TpTicks == tpTicks && cacheProbSignalPro_v4_Color[idx].SlTicks == slTicks && cacheProbSignalPro_v4_Color[idx].FiltrarSenalesDudosas == filtrarSenalesDudosas && cacheProbSignalPro_v4_Color[idx].EqualsInput(input))
						return cacheProbSignalPro_v4_Color[idx];
			return CacheIndicator<ProbSignalPro_v4_Color>(new ProbSignalPro_v4_Color(){ Beta0 = beta0, BetaEmaSlope = betaEmaSlope, BetaRsiNorm = betaRsiNorm, BetaAtrNorm = betaAtrNorm, BetaDistEmaNorm = betaDistEmaNorm, BetaMomNorm = betaMomNorm, MinProb = minProb, MinMomTicks = minMomTicks, MinEmaSlopeTicks = minEmaSlopeTicks, MinDistTicks = minDistTicks, UseRSIFilter = useRSIFilter, RSIThreshold = rSIThreshold, CooldownBars = cooldownBars, TpTicks = tpTicks, SlTicks = slTicks, FiltrarSenalesDudosas = filtrarSenalesDudosas }, input, ref cacheProbSignalPro_v4_Color);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.ProbSignalPro_v4_Color ProbSignalPro_v4_Color(double beta0, double betaEmaSlope, double betaRsiNorm, double betaAtrNorm, double betaDistEmaNorm, double betaMomNorm, double minProb, int minMomTicks, int minEmaSlopeTicks, int minDistTicks, bool useRSIFilter, double rSIThreshold, int cooldownBars, int tpTicks, int slTicks, bool filtrarSenalesDudosas)
		{
			return indicator.ProbSignalPro_v4_Color(Input, beta0, betaEmaSlope, betaRsiNorm, betaAtrNorm, betaDistEmaNorm, betaMomNorm, minProb, minMomTicks, minEmaSlopeTicks, minDistTicks, useRSIFilter, rSIThreshold, cooldownBars, tpTicks, slTicks, filtrarSenalesDudosas);
		}

		public Indicators.ProbSignalPro_v4_Color ProbSignalPro_v4_Color(ISeries<double> input , double beta0, double betaEmaSlope, double betaRsiNorm, double betaAtrNorm, double betaDistEmaNorm, double betaMomNorm, double minProb, int minMomTicks, int minEmaSlopeTicks, int minDistTicks, bool useRSIFilter, double rSIThreshold, int cooldownBars, int tpTicks, int slTicks, bool filtrarSenalesDudosas)
		{
			return indicator.ProbSignalPro_v4_Color(input, beta0, betaEmaSlope, betaRsiNorm, betaAtrNorm, betaDistEmaNorm, betaMomNorm, minProb, minMomTicks, minEmaSlopeTicks, minDistTicks, useRSIFilter, rSIThreshold, cooldownBars, tpTicks, slTicks, filtrarSenalesDudosas);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.ProbSignalPro_v4_Color ProbSignalPro_v4_Color(double beta0, double betaEmaSlope, double betaRsiNorm, double betaAtrNorm, double betaDistEmaNorm, double betaMomNorm, double minProb, int minMomTicks, int minEmaSlopeTicks, int minDistTicks, bool useRSIFilter, double rSIThreshold, int cooldownBars, int tpTicks, int slTicks, bool filtrarSenalesDudosas)
		{
			return indicator.ProbSignalPro_v4_Color(Input, beta0, betaEmaSlope, betaRsiNorm, betaAtrNorm, betaDistEmaNorm, betaMomNorm, minProb, minMomTicks, minEmaSlopeTicks, minDistTicks, useRSIFilter, rSIThreshold, cooldownBars, tpTicks, slTicks, filtrarSenalesDudosas);
		}

		public Indicators.ProbSignalPro_v4_Color ProbSignalPro_v4_Color(ISeries<double> input , double beta0, double betaEmaSlope, double betaRsiNorm, double betaAtrNorm, double betaDistEmaNorm, double betaMomNorm, double minProb, int minMomTicks, int minEmaSlopeTicks, int minDistTicks, bool useRSIFilter, double rSIThreshold, int cooldownBars, int tpTicks, int slTicks, bool filtrarSenalesDudosas)
		{
			return indicator.ProbSignalPro_v4_Color(input, beta0, betaEmaSlope, betaRsiNorm, betaAtrNorm, betaDistEmaNorm, betaMomNorm, minProb, minMomTicks, minEmaSlopeTicks, minDistTicks, useRSIFilter, rSIThreshold, cooldownBars, tpTicks, slTicks, filtrarSenalesDudosas);
		}
	}
}

#endregion
