using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using NinjaTrader.Cbi;
using NinjaTrader.Data;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.NinjaScript;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;
using System.Windows.Media;

namespace NinjaTrader.NinjaScript.Indicators
{
    public class MagnoFlux_HertzTuner : Indicator
    {
        #region Parameters
        [NinjaScriptProperty]
        [Display(Name = "IdealMinHz", Order = 1, GroupName = "Parameters")]
        public double IdealMinHz { get; set; } = 0.002;

        [NinjaScriptProperty]
        [Display(Name = "IdealMaxHz", Order = 2, GroupName = "Parameters")]
        public double IdealMaxHz { get; set; } = 0.005;

        [NinjaScriptProperty]
        [Display(Name = "LookbackSignals", Order = 3, GroupName = "Parameters")]
        [Range(2, int.MaxValue, ErrorMessage = "LookbackSignals must be >= 2")]
        public int LookbackSignals { get; set; } = 10;

        [NinjaScriptProperty]
        [Display(Name = "EnableLogging", Order = 4, GroupName = "Parameters")]
        public bool EnableLogging { get; set; } = false;

        [NinjaScriptProperty]
        [Display(Name = "CsvFileName", Order = 5, GroupName = "Parameters")]
        public string CsvFileName { get; set; } = "HertzTuner.csv";
        #endregion

        private SMA volumeSma;
        private Momentum momentum;
        private List<DateTime> signalTimes = new List<DateTime>();
        private double currentHz;
        private string statusEmoji = "\uD83D\uDFE1"; // yellow

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Description = "Calculates the Hertz of entry signals based on MagnoFlux logic.";
                Name = "MagnoFlux_HertzTuner";
                IsOverlay = true;
            }
            else if (State == State.DataLoaded)
            {
                volumeSma = SMA(Volume, 5);
                momentum = Momentum(14);
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < Math.Max(volumeSma.Period, momentum.Period))
                return;

            bool longSignal = IsValidLongSignal();
            bool shortSignal = IsValidShortSignal();

            if (longSignal || shortSignal)
            {
                RegisterSignal(Time[0]);
            }

            Draw.TextFixed(this, "HertzDisplay", $"Hz: {currentHz:F4} {statusEmoji}", TextPosition.TopRight);
        }

        private bool IsValidLongSignal()
        {
            if (Close[0] <= Open[0])
                return false;

            double body = Math.Abs(Close[0] - Open[0]);
            double range = High[0] - Low[0];
            if (body / range < 0.5)
                return false;

            if (Volume[0] < volumeSma[0])
                return false;

            return momentum[0] > 0;
        }

        private bool IsValidShortSignal()
        {
            if (Close[0] >= Open[0])
                return false;

            double body = Math.Abs(Close[0] - Open[0]);
            double range = High[0] - Low[0];
            if (body / range < 0.5)
                return false;

            if (Volume[0] < volumeSma[0])
                return false;

            return momentum[0] < 0;
        }

        private void RegisterSignal(DateTime time)
        {
            signalTimes.Add(time);
            if (signalTimes.Count > LookbackSignals)
                signalTimes.RemoveAt(0);

            if (signalTimes.Count >= 2)
            {
                double totalSeconds = 0;
                for (int i = 1; i < signalTimes.Count; i++)
                {
                    totalSeconds += (signalTimes[i] - signalTimes[i - 1]).TotalSeconds;
                }

                double avgSeconds = totalSeconds / (signalTimes.Count - 1);
                if (avgSeconds > 0)
                {
                    currentHz = 1.0 / avgSeconds;
                    if (currentHz >= IdealMinHz && currentHz <= IdealMaxHz)
                        statusEmoji = "\uD83D\uDFE2"; // green
                    else if (currentHz > IdealMaxHz)
                        statusEmoji = "\uD83D\uDFE1"; // yellow
                    else
                        statusEmoji = "\uD83D\uDD34"; // red
                }
            }

            if (EnableLogging)
            {
                string logLine = $"{time:yyyy-MM-dd HH:mm:ss},{currentHz:F6},{statusEmoji}";
                Print(logLine);
                try
                {
                    File.AppendAllText(CsvFileName, logLine + Environment.NewLine);
                }
                catch { }
            }
        }
    }
}


#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private MagnoFlux_HertzTuner[] cacheMagnoFlux_HertzTuner;
		public MagnoFlux_HertzTuner MagnoFlux_HertzTuner(double idealMinHz, double idealMaxHz, int lookbackSignals, bool enableLogging, string csvFileName)
		{
			return MagnoFlux_HertzTuner(Input, idealMinHz, idealMaxHz, lookbackSignals, enableLogging, csvFileName);
		}

		public MagnoFlux_HertzTuner MagnoFlux_HertzTuner(ISeries<double> input, double idealMinHz, double idealMaxHz, int lookbackSignals, bool enableLogging, string csvFileName)
		{
			if (cacheMagnoFlux_HertzTuner != null)
				for (int idx = 0; idx < cacheMagnoFlux_HertzTuner.Length; idx++)
					if (cacheMagnoFlux_HertzTuner[idx] != null && cacheMagnoFlux_HertzTuner[idx].IdealMinHz == idealMinHz && cacheMagnoFlux_HertzTuner[idx].IdealMaxHz == idealMaxHz && cacheMagnoFlux_HertzTuner[idx].LookbackSignals == lookbackSignals && cacheMagnoFlux_HertzTuner[idx].EnableLogging == enableLogging && cacheMagnoFlux_HertzTuner[idx].CsvFileName == csvFileName && cacheMagnoFlux_HertzTuner[idx].EqualsInput(input))
						return cacheMagnoFlux_HertzTuner[idx];
			return CacheIndicator<MagnoFlux_HertzTuner>(new MagnoFlux_HertzTuner(){ IdealMinHz = idealMinHz, IdealMaxHz = idealMaxHz, LookbackSignals = lookbackSignals, EnableLogging = enableLogging, CsvFileName = csvFileName }, input, ref cacheMagnoFlux_HertzTuner);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.MagnoFlux_HertzTuner MagnoFlux_HertzTuner(double idealMinHz, double idealMaxHz, int lookbackSignals, bool enableLogging, string csvFileName)
		{
			return indicator.MagnoFlux_HertzTuner(Input, idealMinHz, idealMaxHz, lookbackSignals, enableLogging, csvFileName);
		}

		public Indicators.MagnoFlux_HertzTuner MagnoFlux_HertzTuner(ISeries<double> input , double idealMinHz, double idealMaxHz, int lookbackSignals, bool enableLogging, string csvFileName)
		{
			return indicator.MagnoFlux_HertzTuner(input, idealMinHz, idealMaxHz, lookbackSignals, enableLogging, csvFileName);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.MagnoFlux_HertzTuner MagnoFlux_HertzTuner(double idealMinHz, double idealMaxHz, int lookbackSignals, bool enableLogging, string csvFileName)
		{
			return indicator.MagnoFlux_HertzTuner(Input, idealMinHz, idealMaxHz, lookbackSignals, enableLogging, csvFileName);
		}

		public Indicators.MagnoFlux_HertzTuner MagnoFlux_HertzTuner(ISeries<double> input , double idealMinHz, double idealMaxHz, int lookbackSignals, bool enableLogging, string csvFileName)
		{
			return indicator.MagnoFlux_HertzTuner(input, idealMinHz, idealMaxHz, lookbackSignals, enableLogging, csvFileName);
		}
	}
}

#endregion
