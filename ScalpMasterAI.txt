ScalpMasterAI

Total trades: 788

TP (ganadores): 486

SL (perdedores): 302

Eso implica una tasa de acierto de aproximadamente:

486
788
×
100
≈
61.7
%
788
486
​
 ×100≈61.7%


// ScalpMasterAI - Indicador avanzado de scalping para NQ Micro/E-mini
#region Usings
using System;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Windows.Media;
using NinjaTrader.Data;
using NinjaTrader.Gui.Tools;
using NinjaTrader.NinjaScript;
using NinjaTrader.NinjaScript.DrawingTools;
using NinjaTrader.NinjaScript.Indicators;
#endregion

namespace NinjaTrader.NinjaScript.Indicators
{
    public class ScalpMasterAI : Indicator
    {
        // Señal y gestión de salida
        private int    lastSignalBar = -10;
        private DateTime signalTime;
        private double signalPrice;
        private string direction;
        private int    entryBar;
        private double entryPrice, tpPrice, slPrice;
        private bool   inTrade;

        // Estadísticas (opcional)
        private int totalTrades, totalTP, totalSL;

        [NinjaScriptProperty]
        [Range(1, int.MaxValue)]
        [Display(Name="Puntos para TP/SL", GroupName="Parametros", Order=0)]
        public int SignalPoints { get; set; } = 10;

        [NinjaScriptProperty]
        [Range(1,10)]
        [Display(Name="Cooldown (barras)", GroupName="Parametros", Order=1)]
        public int CooldownBars { get; set; } = 1;

        [NinjaScriptProperty]
        [Range(1,200)]
        [Display(Name="Mín Vol (%)", GroupName="Parametros", Order=2)]
        public double MinVolPct { get; set; } = 120;

        [NinjaScriptProperty]
        [Range(1,50)]
        [Display(Name="Min ATR (ticks)", GroupName="Parametros", Order=3)]
        public int MinAtrTicks { get; set; } = 4;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Name              = "ScalpMasterAI";
                Description       = "ScalpMasterAI: cruces EMA, RSI, Vol y ATR para scalping rápido";
                Calculate         = Calculate.OnBarClose;
                IsOverlay         = true;
                DrawOnPricePanel  = true;
                DisplayInDataBox  = true;
                PaintPriceMarkers = false;
                IsAutoScale       = true;
            }
            else if (State == State.DataLoaded)
            {
                totalTrades = totalTP = totalSL = 0;
                inTrade = false;
            }
            else if (State == State.Terminated)
            {
                Print($"Resumen ScalpMasterAI: Trades={totalTrades}, TP={totalTP}, SL={totalSL}");
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < 20) return;

            // Parámetros técnicos
            double emaFast  = EMA(8)[0];
            double rsi5     = RSI(5,1)[0];
            double avgVol   = SMA(Volume, 20)[0];
            double atrTicks = ATR(14)[0] / TickSize;

            bool volOK      = Volume[0] > avgVol * (MinVolPct/100.0);
            bool atrOK      = atrTicks > MinAtrTicks;
            bool rsiOKLong  = rsi5 > 50;
            bool rsiOKShort = rsi5 < 50;

            // Señal por barra (cooldown)
            if (CurrentBar > lastSignalBar + CooldownBars && !inTrade)
            {
                if (CrossAbove(Close, EMA(8), 1) && rsiOKLong && volOK && atrOK)
                    TriggerSignal("LONG");
                else if (CrossBelow(Close, EMA(8), 1) && rsiOKShort && volOK && atrOK)
                    TriggerSignal("SHORT");
            }

            // Gestión TP/SL
            if (inTrade && CurrentBar >= entryBar)
            {
                if (CurrentBar == entryBar)
                {
                    entryPrice = Open[0];
                    // TP/SL en puntos de precio
                    tpPrice = direction == "LONG" ? entryPrice + SignalPoints : entryPrice - SignalPoints;
                    slPrice = direction == "LONG" ? entryPrice - SignalPoints : entryPrice + SignalPoints;
                    totalTrades++;
                }

                bool hitTP = direction == "LONG" ? High[0] >= tpPrice : Low[0] <= tpPrice;
                bool hitSL = direction == "LONG" ? Low[0] <= slPrice  : High[0] >= slPrice;

                if (hitTP || hitSL)
                {
                    string result = hitTP ? "TP" : "SL";
                    if (hitTP) totalTP++; else totalSL++;
                    PrintSignalResult(result);
                    inTrade = false;
                }
            }
        }

        private void TriggerSignal(string dir)
        {
            direction      = dir;
            signalTime     = Time[0];
            signalPrice    = Close[0];
            entryBar       = CurrentBar + 1;
            inTrade        = true;
            lastSignalBar  = CurrentBar;
            // Flecha
            if (dir == "LONG")
                Draw.ArrowUp(this, "L" + CurrentBar, false, 0, Low[0] - 2 * TickSize, Brushes.Lime);
            else
                Draw.ArrowDown(this, "S" + CurrentBar, false, 0, High[0] + 2 * TickSize, Brushes.Red);
        }

        private void PrintSignalResult(string result)
        {
            Func<double,string> fmt = v => v.ToString("0.00", CultureInfo.InvariantCulture).Replace('.', ',');
            string output = string.Format(
                "{0}={1} - Señal {2} Entrada={3} - TP={4} - SL={5} - Resultado={6}",
                direction,
                signalTime.ToString("HH:mm:ss"),
                fmt(signalPrice),
                fmt(entryPrice),
                fmt(tpPrice),
                fmt(slPrice),
                result
            );
            Print(output);
        }
    }
}


#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private ScalpMasterAI[] cacheScalpMasterAI;
		public ScalpMasterAI ScalpMasterAI(int signalPoints, int cooldownBars, double minVolPct, int minAtrTicks)
		{
			return ScalpMasterAI(Input, signalPoints, cooldownBars, minVolPct, minAtrTicks);
		}

		public ScalpMasterAI ScalpMasterAI(ISeries<double> input, int signalPoints, int cooldownBars, double minVolPct, int minAtrTicks)
		{
			if (cacheScalpMasterAI != null)
				for (int idx = 0; idx < cacheScalpMasterAI.Length; idx++)
					if (cacheScalpMasterAI[idx] != null && cacheScalpMasterAI[idx].SignalPoints == signalPoints && cacheScalpMasterAI[idx].CooldownBars == cooldownBars && cacheScalpMasterAI[idx].MinVolPct == minVolPct && cacheScalpMasterAI[idx].MinAtrTicks == minAtrTicks && cacheScalpMasterAI[idx].EqualsInput(input))
						return cacheScalpMasterAI[idx];
			return CacheIndicator<ScalpMasterAI>(new ScalpMasterAI(){ SignalPoints = signalPoints, CooldownBars = cooldownBars, MinVolPct = minVolPct, MinAtrTicks = minAtrTicks }, input, ref cacheScalpMasterAI);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.ScalpMasterAI ScalpMasterAI(int signalPoints, int cooldownBars, double minVolPct, int minAtrTicks)
		{
			return indicator.ScalpMasterAI(Input, signalPoints, cooldownBars, minVolPct, minAtrTicks);
		}

		public Indicators.ScalpMasterAI ScalpMasterAI(ISeries<double> input , int signalPoints, int cooldownBars, double minVolPct, int minAtrTicks)
		{
			return indicator.ScalpMasterAI(input, signalPoints, cooldownBars, minVolPct, minAtrTicks);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.ScalpMasterAI ScalpMasterAI(int signalPoints, int cooldownBars, double minVolPct, int minAtrTicks)
		{
			return indicator.ScalpMasterAI(Input, signalPoints, cooldownBars, minVolPct, minAtrTicks);
		}

		public Indicators.ScalpMasterAI ScalpMasterAI(ISeries<double> input , int signalPoints, int cooldownBars, double minVolPct, int minAtrTicks)
		{
			return indicator.ScalpMasterAI(input, signalPoints, cooldownBars, minVolPct, minAtrTicks);
		}
	}
}

#endregion
