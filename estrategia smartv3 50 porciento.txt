estrategia smartv3 50 porciento 
#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Windows.Media;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.DrawingTools;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.Strategies;
using NinjaTrader.Cbi;
#endregion

namespace NinjaTrader.NinjaScript.Strategies
{
    public class MetaTargetStrategy : Strategy
    {
        private RSI rsi;
        private EMA ema;
        private ATR atr;
        private int LastSignalBar = 0;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Description = "Meta Target Strategy with Smart Score System";
                Name = "MetaTargetStrategy";
                Calculate = Calculate.OnBarClose;
                EntriesPerDirection = 1;
                EntryHandling = EntryHandling.AllEntries;
                IsExitOnSessionCloseStrategy = true;
                IsFillLimitOnTouch = false;
                MaximumBarsLookBack = MaximumBarsLookBack.TwoHundredFiftySix;
                OrderFillResolution = OrderFillResolution.Standard;
                Slippage = 0;
                StartBehavior = StartBehavior.WaitUntilFlat;
                TimeInForce = TimeInForce.Gtc;
                TraceOrders = false;
                RealtimeErrorHandling = RealtimeErrorHandling.StopCancelClose;
                StopTargetHandling = StopTargetHandling.PerEntryExecution;
                BarsRequiredToTrade = 20;

                // Default parameter values
                EMAPeriod = 14;
                CooldownBars = 12;
                RSIPeriod = 14;
                RSIOversold = 30;
                RSIOverbought = 70;
                ATRPeriod = 3;
                ATRMultiplier = 0.75;
                MinimumScore = 75;
                SignalDirection = 0;

                // Plotting properties
                IsOverlay = true;
                DisplayInDataBox = true;
                DrawOnPricePanel = true;
            }
            else if (State == State.Configure)
            {
                ClearOutputWindow();
              
                // Initialize indicators
                rsi = RSI(Close, RSIPeriod, 1);
                ema = EMA(Close, EMAPeriod);
                atr = ATR(ATRPeriod);
            }
            else if (State == State.DataLoaded)
            {
                if (rsi == null || ema == null || atr == null)
                {
                    Log("Error: Indicators not properly initialized", LogLevel.Error);
                    return;
                }
            }
        }

        [NinjaScriptProperty]
        [Range(1, int.MaxValue)]
        [Display(Name="EMA Period", Description="EMA Period", Order=1, GroupName="Parameters")]
        public int EMAPeriod { get; set; }

        [NinjaScriptProperty]
        [Range(1, int.MaxValue)]
        [Display(Name="Cooldown Bars", Description="Bars between signals", Order=2, GroupName="Parameters")]
        public int CooldownBars { get; set; }

        [NinjaScriptProperty]
        [Range(1, int.MaxValue)]
        [Display(Name="RSI Period", Description="RSI Period", Order=3, GroupName="Parameters")]
        public int RSIPeriod { get; set; }

        [NinjaScriptProperty]
        [Range(1, 100)]
        [Display(Name="RSI Oversold", Description="RSI Oversold level", Order=4, GroupName="Parameters")]
        public int RSIOversold { get; set; }

        [NinjaScriptProperty]
        [Range(1, 100)]
        [Display(Name="RSI Overbought", Description="RSI Overbought level", Order=5, GroupName="Parameters")]
        public int RSIOverbought { get; set; }

        [NinjaScriptProperty]
        [Range(1, int.MaxValue)]
        [Display(Name="ATR Period", Description="ATR Period", Order=6, GroupName="Parameters")]
        public int ATRPeriod { get; set; }

        [NinjaScriptProperty]
        [Range(0.1, 10.0)]
        [Display(Name="ATR Multiplier", Description="ATR Multiplier for signal placement", Order=7, GroupName="Parameters")]
        public double ATRMultiplier { get; set; }

        [NinjaScriptProperty]
        [Range(0, 100)]
        [Display(Name="Minimum Score", Description="Minimum score required for signals", Order=8, GroupName="Parameters")]
        public double MinimumScore { get; set; }

        [NinjaScriptProperty]
        [Range(0, 2)]
        [Display(Name="Signal Type", Description="Signal Type (0=Both, 1=LongOnly, 2=ShortOnly)", Order=9, GroupName="Parameters")]
        public int SignalDirection { get; set; }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < BarsRequiredToTrade)
                return;

            double score = CalculateScore();
          
            if ((SignalDirection == 0 || SignalDirection == 1) && 
                IsValidLongSignal(score) &&
                Position.MarketPosition != MarketPosition.Long)
            {
                DrawLongSignal();
                EnterLong(DefaultQuantity, "LONG");
                SetStopLoss(CalculationMode.Price, Low[0] - atr[0] * ATRMultiplier);
                SetProfitTarget(CalculationMode.Price, Close[0] + (atr[0] * ATRMultiplier * 2));
            }
          
            if ((SignalDirection == 0 || SignalDirection == 2) && 
                IsValidShortSignal(score) &&
                Position.MarketPosition != MarketPosition.Short)
            {
                DrawShortSignal();
                EnterShort(DefaultQuantity, "SHORT");
                SetStopLoss(CalculationMode.Price, High[0] + atr[0] * ATRMultiplier);
                SetProfitTarget(CalculationMode.Price, Close[0] - (atr[0] * ATRMultiplier * 2));
            }
        }

        private double CalculateScore()
        {
            double score = 0;
          
            if (rsi[0] < RSIOversold) score += 25;
            if (rsi[0] > RSIOverbought) score -= 25;
          
            if (Close[0] > ema[0]) score += 25;
            if (Close[0] < ema[0]) score -= 25;
          
            if (ema[0] > ema[1]) score += 25;
            if (ema[0] < ema[1]) score -= 25;
          
            if (Close[0] > Close[1]) score += 25;
            if (Close[0] < Close[1]) score -= 25;
          
            return Math.Abs(score);
        }

        private bool IsValidLongSignal(double score)
        {
            if (score < MinimumScore) return false;
            if (LastSignalBar + CooldownBars > CurrentBar) return false;
          
            return Close[0] > ema[0] && 
                   rsi[0] < RSIOverbought && 
                   Close[0] > Close[1];
        }

        private bool IsValidShortSignal(double score)
        {
            if (score < MinimumScore) return false;
            if (LastSignalBar + CooldownBars > CurrentBar) return false;
          
            return Close[0] < ema[0] && 
                   rsi[0] > RSIOversold && 
                   Close[0] < Close[1];
        }

        private void DrawLongSignal()
        {
            Draw.ArrowUp(this, "Long_" + CurrentBar, false, 0, Low[0] - atr[0] * ATRMultiplier, Brushes.LimeGreen);
            Draw.Text(this, "LongText_" + CurrentBar, "LONG\nScore: " + CalculateScore().ToString("F0"), 
                0, Low[0] - atr[0] * ATRMultiplier * 2);
            LastSignalBar = CurrentBar;
        }

        private void DrawShortSignal()
        {
            Draw.ArrowDown(this, "Short_" + CurrentBar, false, 0, High[0] + atr[0] * ATRMultiplier, Brushes.Red);
            Draw.Text(this, "ShortText_" + CurrentBar, "SHORT\nScore: " + CalculateScore().ToString("F0"), 
                0, High[0] + atr[0] * ATRMultiplier * 2);
            LastSignalBar = CurrentBar;
        }
    }
}