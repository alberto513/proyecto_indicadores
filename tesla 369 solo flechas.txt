tesla 369 solo flechas
#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Windows.Media;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

namespace NinjaTrader.NinjaScript.Indicators
{
    public class Tesla369Simple : Indicator
    {
        private RSI rsi;
        private EMA ema;
        private ATR atr;
        private int lastSignalBar = 0;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Description = "Tesla369 Indicator - Simplified";
                Name = "Tesla369Simple";
                EMAPeriod = 14;
                CooldownBars = 12;
                RSIPeriod = 14;
                RSIOversold = 30;
                RSIOverbought = 70;
                ATRPeriod = 3;
                ATRMultiplier = 0.75;
                MinimumScore = 75;
                SignalDirection = 0; // 0 = Both, 1 = LongOnly, 2 = ShortOnly

                Calculate = Calculate.OnBarClose;
                IsOverlay = true;
                DisplayInDataBox = true;
                DrawOnPricePanel = true;
                DrawHorizontalGridLines = true;
                DrawVerticalGridLines = true;
                PaintPriceMarkers = true;
                ScaleJustification = NinjaTrader.Gui.Chart.ScaleJustification.Right;
                IsSuspendedWhileInactive = true;
            }
            else if (State == State.Configure)
            {
                AddPlot(new Stroke(Brushes.Gray, 2), PlotStyle.Line, "EMA");
            }
            else if (State == State.DataLoaded)
            {
                rsi = RSI(Close, RSIPeriod, 1);
                ema = EMA(Close, EMAPeriod);
                atr = ATR(ATRPeriod);
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < Math.Max(Math.Max(EMAPeriod, RSIPeriod), ATRPeriod))
                return;

            // Plot EMA
            Values[0][0] = ema[0];

            double score = CalculateScore();

            // Lógica para señales largas
            if ((SignalDirection == 0 || SignalDirection == 1) &&
                IsValidLongSignal(score))
            {
                DrawLongSignal();
            }

            // Lógica para señales cortas
            if ((SignalDirection == 0 || SignalDirection == 2) &&
                IsValidShortSignal(score))
            {
                DrawShortSignal();
            }
        }

        private double CalculateScore()
        {
            double score = 0;

            // Puntuación RSI
            if (rsi[0] < RSIOversold) score += 25;
            if (rsi[0] > RSIOverbought) score -= 25;

            // Puntuación EMA
            if (Close[0] > ema[0]) score += 25;
            if (Close[0] < ema[0]) score -= 25;

            // Puntuación Tendencia
            if (ema[0] > ema[1]) score += 25;
            if (ema[0] < ema[1]) score -= 25;

            // Puntuación Momentum
            if (Close[0] > Close[1]) score += 25;
            if (Close[0] < Close[1]) score -= 25;

            return Math.Abs(score);
        }

        private bool IsValidLongSignal(double score)
        {
            if (score < MinimumScore) return false;
            if (lastSignalBar + CooldownBars > CurrentBar) return false;

            return Close[0] > ema[0] &&
                   rsi[0] < RSIOverbought &&
                   Close[0] > Close[1];
        }

        private bool IsValidShortSignal(double score)
        {
            if (score < MinimumScore) return false;
            if (lastSignalBar + CooldownBars > CurrentBar) return false;

            return Close[0] < ema[0] &&
                   rsi[0] > RSIOversold &&
                   Close[0] < Close[1];
        }

        private void DrawLongSignal()
        {
            Draw.ArrowUp(this, "Long_" + CurrentBar, false, 0, Low[0] - atr[0] * ATRMultiplier, Brushes.LimeGreen);
            lastSignalBar = CurrentBar;
        }

        private void DrawShortSignal()
        {
            Draw.ArrowDown(this, "Short_" + CurrentBar, false, 0, High[0] + atr[0] * ATRMultiplier, Brushes.Red);
            lastSignalBar = CurrentBar;
        }

        #region Properties
        [Range(1, int.MaxValue)]
        [NinjaScriptProperty]
        [Display(Name = "EMA Period", Description = "EMA Period", Order = 1, GroupName = "Parameters")]
        public int EMAPeriod { get; set; }

        [Range(1, int.MaxValue)]
        [NinjaScriptProperty]
        [Display(Name = "Cooldown Bars", Description = "Bars between signals", Order = 2, GroupName = "Parameters")]
        public int CooldownBars { get; set; }

        [Range(1, int.MaxValue)]
        [NinjaScriptProperty]
        [Display(Name = "RSI Period", Description = "RSI Period", Order = 3, GroupName = "Parameters")]
        public int RSIPeriod { get; set; }

        [Range(1, 100)]
        [NinjaScriptProperty]
        [Display(Name = "RSI Oversold", Description = "RSI Oversold level", Order = 4, GroupName = "Parameters")]
        public int RSIOversold { get; set; }

        [Range(1, 100)]
        [NinjaScriptProperty]
        [Display(Name = "RSI Overbought", Description = "RSI Overbought level", Order = 5, GroupName = "Parameters")]
        public int RSIOverbought { get; set; }

        [Range(1, int.MaxValue)]
        [NinjaScriptProperty]
        [Display(Name = "ATR Period", Description = "ATR Period", Order = 6, GroupName = "Parameters")]
        public int ATRPeriod { get; set; }

        [Range(0.1, 10)]
        [NinjaScriptProperty]
        [Display(Name = "ATR Multiplier", Description = "ATR Multiplier for signal placement", Order = 7, GroupName = "Parameters")]
        public double ATRMultiplier { get; set; }

        [Range(0, 100)]
        [NinjaScriptProperty]
        [Display(Name = "Minimum Score", Description = "Minimum score required for signals", Order = 8, GroupName = "Parameters")]
        public double MinimumScore { get; set; }

        [Range(0, 2)]
        [NinjaScriptProperty]
        [Display(Name = "Signal Type", Description = "Signal Type (0=Both, 1=LongOnly, 2=ShortOnly)", Order = 9, GroupName = "Parameters")]
        public int SignalDirection { get; set; }
        #endregion
    }
}