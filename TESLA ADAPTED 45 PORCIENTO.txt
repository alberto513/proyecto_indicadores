TESLA ADAPTED 45 PORCIENTO

#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Windows.Media;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.DrawingTools;
using NinjaTrader.NinjaScript.Indicators;
#endregion

namespace NinjaTrader.NinjaScript.Indicators
{
    public class TeslaRenkoAdapted : Indicator
    {
        private EMA ema;
        private ATR atr;
        private int lastSignalBar = -1000;

        private class SignalInfo
        {
            public int BarIndex;
            public string Tipo;
            public double EntryPrice;
            public bool Evaluated = false;
            public double MaxFavor = 0;
            public double MaxContra = 0;
        }

        private List<SignalInfo> signals = new List<SignalInfo>();

        [NinjaScriptProperty, Range(1, int.MaxValue)]
        [Display(Name = "EMA Period", GroupName = "Par치metros", Order = 1)]
        public int EMAPeriod { get; set; }

        [NinjaScriptProperty, Range(1, int.MaxValue)]
        [Display(Name = "ATR Period", GroupName = "Par치metros", Order = 2)]
        public int ATRPeriod { get; set; }

        [NinjaScriptProperty, Range(1, int.MaxValue)]
        [Display(Name = "Cooldown Bars", GroupName = "Par치metros", Order = 3)]
        public int CooldownBars { get; set; }

        [NinjaScriptProperty, Range(0, 2)]
        [Display(Name = "Signal Type (0=Both,1=LongOnly,2=ShortOnly)", GroupName = "Par치metros", Order = 4)]
        public int SignalDirection { get; set; }

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Description = "Tesla adaptado para Wicked Renko";
                Name = "TeslaRenkoAdapted";
                Calculate = Calculate.OnEachTick;
                IsOverlay = true;
                AddPlot(Brushes.DodgerBlue, "EMA");
                EMAPeriod = 14;
                ATRPeriod = 3;
                CooldownBars = 10;
                SignalDirection = 0;
            }
            else if (State == State.DataLoaded)
            {
                ema = EMA(Close, EMAPeriod);
                atr = ATR(ATRPeriod);
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < Math.Max(EMAPeriod, ATRPeriod)) return;

            Values[0][0] = ema[0];

            bool canFire = lastSignalBar + CooldownBars <= CurrentBar;
            string tipoOperacion = "";

            if ((SignalDirection == 0 || SignalDirection == 1) && canFire && Close[0] > ema[0] && Close[0] > Close[1])
            {
                Draw.ArrowUp(this, "L" + CurrentBar, false, 0, Low[0] - atr[0], Brushes.Lime);
                tipoOperacion = "LONG";
                signals.Add(new SignalInfo { BarIndex = CurrentBar, Tipo = tipoOperacion, EntryPrice = Open[0] });
                lastSignalBar = CurrentBar;
            }

            if ((SignalDirection == 0 || SignalDirection == 2) && canFire && Close[0] < ema[0] && Close[0] < Close[1])
            {
                Draw.ArrowDown(this, "S" + CurrentBar, false, 0, High[0] + atr[0], Brushes.Red);
                tipoOperacion = "SHORT";
                signals.Add(new SignalInfo { BarIndex = CurrentBar, Tipo = tipoOperacion, EntryPrice = Open[0] });
                lastSignalBar = CurrentBar;
            }

            double tickSize = TickSize;
            int ticksTarget = 40; // 10 puntos para NQ

            foreach (var sig in signals)
            {
                if (sig.Evaluated || CurrentBar <= sig.BarIndex) continue;

                double currentFavor = 0;
                double currentContra = 0;

                if (sig.Tipo == "LONG")
                {
                    currentFavor = (High[0] - sig.EntryPrice) / tickSize;
                    currentContra = (sig.EntryPrice - Low[0]) / tickSize;
                }
                else
                {
                    currentFavor = (sig.EntryPrice - Low[0]) / tickSize;
                    currentContra = (High[0] - sig.EntryPrice) / tickSize;
                }

                sig.MaxFavor = Math.Max(sig.MaxFavor, currentFavor);
                sig.MaxContra = Math.Max(sig.MaxContra, currentContra);

                if (sig.MaxFavor >= ticksTarget)
                {
                    sig.Evaluated = true;
                    Print(Time[0].ToString("HH:mm:ss") + " - " + sig.Tipo +
                          " - Close=" + sig.EntryPrice.ToString("F2") +
                          " - EMA=" + ema[sig.BarIndex].ToString("F2") +
                          " - EMAprev=" + ema[Math.Max(sig.BarIndex - 1, 0)].ToString("F2") +
                          " - ATR=" + atr[sig.BarIndex].ToString("F2") +
                          " - DistEMA=" + Math.Abs(sig.EntryPrice - ema[sig.BarIndex]).ToString("F2") +
                          " - Momentum3=" + (Close[0] - Close[Math.Max(CurrentBar - 3, 0)]).ToString("F2") +
                          " - Resultado=TP");
                }
                else if (sig.MaxContra >= ticksTarget)
                {
                    sig.Evaluated = true;
                    Print(Time[0].ToString("HH:mm:ss") + " - " + sig.Tipo +
                          " - Close=" + sig.EntryPrice.ToString("F2") +
                          " - EMA=" + ema[sig.BarIndex].ToString("F2") +
                          " - EMAprev=" + ema[Math.Max(sig.BarIndex - 1, 0)].ToString("F2") +
                          " - ATR=" + atr[sig.BarIndex].ToString("F2") +
                          " - DistEMA=" + Math.Abs(sig.EntryPrice - ema[sig.BarIndex]).ToString("F2") +
                          " - Momentum3=" + (Close[0] - Close[Math.Max(CurrentBar - 3, 0)]).ToString("F2") +
                          " - Resultado=SL");
                }
            }
        }
    }
}
