// -------------------------------------------
// MagnoFlux_v3 – Indicador institucional + FPLEME Proxy (entrada en barra siguiente)
// -------------------------------------------
using System;
using System.Windows.Media;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;

namespace NinjaTrader.NinjaScript.Indicators
{
    public class MagnoFlux_v3 : Indicator
    {
        // --------- variables institucionales ---------
        private double avgVolume;
        private double speedScore;
        private double prevSpeedScore;
        private int    lastSignalBar = -1000;
        private SignalData sig;

        // --------- parámetros públicos ---------
        [NinjaScriptProperty] public int    SignalPoints      { get; set; } = 40;   // 10 pts (40 ticks)
        [NinjaScriptProperty] public int    CooldownBars      { get; set; } = 5;
        [NinjaScriptProperty] public int    MinConditions     { get; set; } = 3;
        [NinjaScriptProperty] public double VolumeThreshold   { get; set; } = 1.8;
        [NinjaScriptProperty] public int    SpeedTicks        { get; set; } = 25;
        [NinjaScriptProperty] public double BodyContextRatio  { get; set; } = 0.4;
        [NinjaScriptProperty] public double SlopeMin          { get; set; } = 0.05;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Name       = "MagnoFlux_v3";
                Calculate  = Calculate.OnBarClose;
                IsOverlay  = true;
                AddPlot(Brushes.Transparent, "Invisible");
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < 30)
                return;

            // --------- Si la operación fue lanzada en la barra anterior, ahora fijamos la entrada real ---------
            if (sig != null && !sig.Done && sig.EntryBar == CurrentBar && double.IsNaN(sig.EntryPrice))
            {
                // Entrada en Open[0] (primera acción de la barra siguiente a la señal)
                sig.EntryPrice = Open[0];
                sig.TP = sig.IsLong ? sig.EntryPrice + SignalPoints * TickSize : sig.EntryPrice - SignalPoints * TickSize;
                sig.SL = sig.IsLong ? sig.EntryPrice - SignalPoints * TickSize : sig.EntryPrice + SignalPoints * TickSize;

                Print($"CONFIRM={sig.Time:HH:mm:ss} - {(sig.IsLong ? "LONG" : "SHORT")} Entrada={sig.EntryPrice:F2} TP={sig.TP:F2} SL={sig.SL:F2}");
            }

            // --------- Evaluar TP/SL después de la barra de entrada ---------
            if (sig != null && !sig.Done && CurrentBar > sig.EntryBar)
            {
                if (sig.IsLong && High[0] >= sig.TP) EndTrade("TP");
                else if (!sig.IsLong && Low[0] <= sig.TP) EndTrade("TP");
                else if (sig.IsLong && Low[0] <= sig.SL) EndTrade("SL");
                else if (!sig.IsLong && High[0] >= sig.SL) EndTrade("SL");
            }

            // Evitar lógica de señal si estamos dentro del cooldown o ya en trade
            if (CurrentBar <= lastSignalBar + CooldownBars || (sig != null && !sig.Done))
                return;

            // --------- Cálculo de filtros institucionales ---------
            avgVolume   = SMA(Volume, 14)[0];
            bool volumeSpike = Volume[0] > avgVolume * VolumeThreshold;

            speedScore      = Math.Abs(Close[0] - Close[3]) / TickSize;   // ticks en 3 barras
            prevSpeedScore  = Math.Abs(Close[1] - Close[4]) / TickSize;
            bool fastMove   = speedScore >= SpeedTicks;

            bool imbalance = (Close[0] > High[1] && Low[0] > Low[1]) ||
                             (Close[0] < Low[1] && High[0] < High[1]);

            bool trap = (High[1] > High[2] && Close[0] < Low[1]) ||
                        (Low[1] < Low[2] && Close[0] > High[1]);

            double body = Math.Abs(Close[0] - Open[0]);
            bool contextOk = body > (High[0] - Low[0]) * BodyContextRatio;

            int instFiltros = 0;
            if (volumeSpike) instFiltros++;
            if (fastMove)    instFiltros++;
            if (imbalance)   instFiltros++;
            if (trap)        instFiltros++;
            if (contextOk)   instFiltros++;

            // --------- FPLEME proxy ---------
            double emaSlope = (EMA(20)[0] - EMA(20)[5]) / (5 * TickSize);
            double trNow    = ATR(1)[0]  / TickSize;
            double trAvg    = ATR(14)[0] / TickSize;
            bool etapaExpansiva = emaSlope > SlopeMin && trNow > trAvg * 1.1;
            bool posibleShark   = trNow < trAvg * 0.7 && speedScore < prevSpeedScore;
            bool vxAlto         = speedScore >= 60;
            bool filtroFPLEME_OK = etapaExpansiva && vxAlto && !posibleShark;

            // --------- Señal final ---------
            bool bullish = Close[0] > Open[0];
            bool bearish = Close[0] < Open[0];
            bool longCond  = filtroFPLEME_OK && instFiltros >= MinConditions && bullish;
            bool shortCond = filtroFPLEME_OK && instFiltros >= MinConditions && bearish;

            if (longCond)
            {
                EnterSignal(true);
                lastSignalBar = CurrentBar;
            }
            else if (shortCond)
            {
                EnterSignal(false);
                lastSignalBar = CurrentBar;
            }
        }

        private void EnterSignal(bool isLong)
        {
            // Creamos la estructura pero la entrada real se fijará en la siguiente barra
            sig = new SignalData
            {
                Time       = Time[0],
                EntryBar   = CurrentBar + 1,
                EntryPrice = double.NaN,  // se asigna en la siguiente barra
                TP         = 0,
                SL         = 0,
                IsLong     = isLong,
                Done       = false
            };

            if (isLong)
                Draw.TriangleUp(this, "L" + CurrentBar, false, 0, Low[0] - TickSize, Brushes.Lime);
            else
                Draw.TriangleDown(this, "S" + CurrentBar, false, 0, High[0] + TickSize, Brushes.Red);

            Print($"SIGNAL={sig.Time:HH:mm:ss} - {(isLong ? "LONG" : "SHORT")} generada – entrada en próxima barra");
        }

        private void EndTrade(string result)
        {
            Print($"{result} en {Time[0]:HH:mm:ss}");
            sig.Done = true;
        }

        // --------- estructura interna ---------
        private class SignalData
        {
            public DateTime Time;
            public int      EntryBar;
            public double   EntryPrice;
            public double   TP;
            public double   SL;
            public bool     IsLong;
            public bool     Done;
        }
    }
}


#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private MagnoFlux_v3[] cacheMagnoFlux_v3;
		public MagnoFlux_v3 MagnoFlux_v3(int signalPoints, int cooldownBars, int minConditions, double volumeThreshold, int speedTicks, double bodyContextRatio, double slopeMin)
		{
			return MagnoFlux_v3(Input, signalPoints, cooldownBars, minConditions, volumeThreshold, speedTicks, bodyContextRatio, slopeMin);
		}

		public MagnoFlux_v3 MagnoFlux_v3(ISeries<double> input, int signalPoints, int cooldownBars, int minConditions, double volumeThreshold, int speedTicks, double bodyContextRatio, double slopeMin)
		{
			if (cacheMagnoFlux_v3 != null)
				for (int idx = 0; idx < cacheMagnoFlux_v3.Length; idx++)
					if (cacheMagnoFlux_v3[idx] != null && cacheMagnoFlux_v3[idx].SignalPoints == signalPoints && cacheMagnoFlux_v3[idx].CooldownBars == cooldownBars && cacheMagnoFlux_v3[idx].MinConditions == minConditions && cacheMagnoFlux_v3[idx].VolumeThreshold == volumeThreshold && cacheMagnoFlux_v3[idx].SpeedTicks == speedTicks && cacheMagnoFlux_v3[idx].BodyContextRatio == bodyContextRatio && cacheMagnoFlux_v3[idx].SlopeMin == slopeMin && cacheMagnoFlux_v3[idx].EqualsInput(input))
						return cacheMagnoFlux_v3[idx];
			return CacheIndicator<MagnoFlux_v3>(new MagnoFlux_v3(){ SignalPoints = signalPoints, CooldownBars = cooldownBars, MinConditions = minConditions, VolumeThreshold = volumeThreshold, SpeedTicks = speedTicks, BodyContextRatio = bodyContextRatio, SlopeMin = slopeMin }, input, ref cacheMagnoFlux_v3);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.MagnoFlux_v3 MagnoFlux_v3(int signalPoints, int cooldownBars, int minConditions, double volumeThreshold, int speedTicks, double bodyContextRatio, double slopeMin)
		{
			return indicator.MagnoFlux_v3(Input, signalPoints, cooldownBars, minConditions, volumeThreshold, speedTicks, bodyContextRatio, slopeMin);
		}

		public Indicators.MagnoFlux_v3 MagnoFlux_v3(ISeries<double> input , int signalPoints, int cooldownBars, int minConditions, double volumeThreshold, int speedTicks, double bodyContextRatio, double slopeMin)
		{
			return indicator.MagnoFlux_v3(input, signalPoints, cooldownBars, minConditions, volumeThreshold, speedTicks, bodyContextRatio, slopeMin);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.MagnoFlux_v3 MagnoFlux_v3(int signalPoints, int cooldownBars, int minConditions, double volumeThreshold, int speedTicks, double bodyContextRatio, double slopeMin)
		{
			return indicator.MagnoFlux_v3(Input, signalPoints, cooldownBars, minConditions, volumeThreshold, speedTicks, bodyContextRatio, slopeMin);
		}

		public Indicators.MagnoFlux_v3 MagnoFlux_v3(ISeries<double> input , int signalPoints, int cooldownBars, int minConditions, double volumeThreshold, int speedTicks, double bodyContextRatio, double slopeMin)
		{
			return indicator.MagnoFlux_v3(input, signalPoints, cooldownBars, minConditions, volumeThreshold, speedTicks, bodyContextRatio, slopeMin);
		}
	}
}

#endregion
