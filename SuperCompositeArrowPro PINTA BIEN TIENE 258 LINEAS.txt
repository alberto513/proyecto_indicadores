#region Using declarations
using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using System.Windows.Media;
using NinjaTrader.NinjaScript;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

namespace NinjaTrader.NinjaScript.Indicators
{
    public class SuperCompositeArrowPro : Indicator
    {
        #region Variables and Series
        // Indicadores internos utilizados
        private EMA emaIndicator;
        private RSI rsiIndicator;
        private ATR atrIndicator;
        private SMA volMA;
        // Series para valores auxiliares
        private Series<double> volSpikeSeries;
        private Series<double> imbalanceSeries;
        private Series<double> momentumSeries;
        // Estado de la señal/operación actual
        private bool inTrade = false;
        private bool entryPriceSet = false;
        private int tradeDirection = 0; // 1 = LONG, -1 = SHORT
        private double signalPrice = 0.0;
        private double entryPrice = 0.0;
        private double tpPrice = 0.0;
        private double slPrice = 0.0;
        private DateTime signalTime;
        private int signalBarIndex = 0;
        private int skipUntilBar = 0;
        // Coeficientes de la regresión logística (ajustar según análisis histórico)
        private double w0 = 0.0;
        private double wEmaSlope = 1.0;
        private double wATR = -0.5;
        private double wRSI = 1.0;
        private double wMomentum = 1.0;
        private double wDistEMA = -0.5;
        // Filtro lateral: factor para determinar mercado lateral (rango de barra < factor * ATR)
        private double lateralFactor = 0.5;
        #endregion

        #region OnStateChange
        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                // Configuración por defecto del indicador
                Description = "Indicador compuesto con flechas LONG/SHORT, salida de TP/SL y probabilidad (regresión logística).";
                Name = "SuperCompositeArrowPro";
                Calculate = Calculate.OnBarClose;
                IsOverlay = true;
                DisplayInDataBox = true;
                DrawOnPricePanel = true;
                IsSuspendedWhileInactive = false;
                // Valores predeterminados de parámetros
                SignalPoints = 10;
                CooldownBars = 5;
            }
            else if (State == State.DataLoaded)
            {
                // Instanciar indicadores auxiliares
                emaIndicator = EMA(14);
                rsiIndicator = RSI(14, 3);
                atrIndicator = ATR(14);
                volMA = SMA(Volume, 20);
                // Inicializar series de datos
                volSpikeSeries = new Series<double>(this);
                imbalanceSeries = new Series<double>(this);
                momentumSeries = new Series<double>(this);
            }
        }
        #endregion

        protected override void OnBarUpdate()
        {
            // Esperar hasta tener suficientes datos para cálculos iniciales
            if (CurrentBar < 20)
                return;

            // Calcular valores de indicadores y series auxiliares en esta barra
            double emaValue = emaIndicator[0];
            double rsiValue = rsiIndicator[0];
            double atrValue = atrIndicator[0];
            double avgVol = volMA[0];
            double volSpikeVal = avgVol > 0 ? Volume[0] / avgVol : 0;
            double imbalanceVal = (High[0] - Low[0] > 0) ? (Close[0] - Low[0]) / (High[0] - Low[0]) : 0.5;
            int momPeriod = 5;
            double momentumVal = (CurrentBar >= momPeriod) ? (Close[0] - Close[momPeriod]) : 0;
            // Asignar a las Series<double>
            volSpikeSeries[0] = volSpikeVal;
            imbalanceSeries[0] = imbalanceVal;
            momentumSeries[0] = momentumVal;

            // Manejo de una operación en curso
            if (inTrade)
            {
                // Si aún no se estableció precio de entrada, significa que esta es la primera barra posterior a la señal
                if (!entryPriceSet)
                {
                    // Tomar la entrada en la apertura de la barra actual (barra siguiente a la señal)
                    entryPrice = Open[0];
                    entryPriceSet = true;
                    // Calcular TP y SL fijos en puntos desde la entrada
                    tpPrice = (tradeDirection == 1) ? entryPrice + SignalPoints : entryPrice - SignalPoints;
                    slPrice = (tradeDirection == 1) ? entryPrice - SignalPoints : entryPrice + SignalPoints;
                }
                // Verificar si se alcanzó TP o SL en esta barra
                if (tradeDirection == 1) // Operación LONG
                {
                    bool tpHit = High[0] >= tpPrice;
                    bool slHit = Low[0] <= slPrice;
                    if (tpHit || slHit)
                    {
                        // Determinar resultado (si ambos ocurren en la misma barra, prioriza TP)
                        string result = tpHit ? "TP" : "SL";
                        string timeStr = signalTime.ToString("HH:mm:ss");
                        // Formatear precios con coma decimal
                        string signalPriceStr = signalPrice.ToString("0.00").Replace('.', ',');
                        string entryPriceStr = entryPrice.ToString("0.00").Replace('.', ',');
                        string tpPriceStr = tpPrice.ToString("0.00").Replace('.', ',');
                        string slPriceStr = slPrice.ToString("0.00").Replace('.', ',');
                        // Imprimir resultado en la ventana de Output
                        Print($"{"LONG"}={timeStr} - Señal {signalPriceStr} Entrada={entryPriceStr} - TP={tpPriceStr} - SL={slPriceStr} - Resultado={result}");
                        // Resetear estado de la operación
                        inTrade = false;
                        entryPriceSet = false;
                        tradeDirection = 0;
                        // Aplicar periodo de enfriamiento (no tomar nuevas señales por X barras)
                        skipUntilBar = CurrentBar + CooldownBars;
                    }
                }
                else if (tradeDirection == -1) // Operación SHORT
                {
                    bool tpHit = Low[0] <= tpPrice;
                    bool slHit = High[0] >= slPrice;
                    if (tpHit || slHit)
                    {
                        // Si ocurren ambos en la misma barra, prioriza TP (similar al caso LONG)
                        string result = tpHit ? "TP" : "SL";
                        string timeStr = signalTime.ToString("HH:mm:ss");
                        string signalPriceStr = signalPrice.ToString("0.00").Replace('.', ',');
                        string entryPriceStr = entryPrice.ToString("0.00").Replace('.', ',');
                        string tpPriceStr = tpPrice.ToString("0.00").Replace('.', ',');
                        string slPriceStr = slPrice.ToString("0.00").Replace('.', ',');
                        Print($"{"SHORT"}={timeStr} - Señal {signalPriceStr} Entrada={entryPriceStr} - TP={tpPriceStr} - SL={slPriceStr} - Resultado={result}");
                        inTrade = false;
                        entryPriceSet = false;
                        tradeDirection = 0;
                        skipUntilBar = CurrentBar + CooldownBars;
                    }
                }
                // Si la operación continúa (no alcanzó TP/SL), salir de OnBarUpdate hasta la próxima barra
                if (inTrade) 
                    return;
            }

            // Si no hay operación activa, verificar cooldown para no generar señales muy seguidas
            if (CurrentBar < skipUntilBar)
                return;

            // Filtro de lateralización: omitir señal si el rango de la barra es muy pequeño en relación al ATR
            bool lateralMarket = (High[0] - Low[0]) < atrValue * lateralFactor;
            if (lateralMarket)
                return;

            // Cálculo de probabilidad mediante regresión logística con las variables seleccionadas
            // Normalizar/ajustar las variables de entrada
            double emaSlope = (CurrentBar > 0) ? emaIndicator[0] - emaIndicator[1] : 0.0;
            double atrNorm = atrValue;  // ATR en puntos (se puede normalizar adicionalmente si se desea)
            double rsiNorm = (rsiValue - 50.0) / 50.0;  // RSI centrado en 0 (valores entre -1 y 1 aprox)
            double momentumNorm = atrValue > 0 ? momentumVal / atrValue : momentumVal;
            double distToEMA = Close[0] - emaValue;
            double distNorm = atrValue > 0 ? distToEMA / atrValue : distToEMA;
            // Calcular puntaje lineal y probabilidad sigmoidal
            double linearScore = w0 + wEmaSlope * emaSlope + wATR * atrNorm + wRSI * rsiNorm + wMomentum * momentumNorm + wDistEMA * distNorm;
            double probability = 1.0 / (1.0 + Math.Exp(-linearScore));

            // Determinar señal LONG/SHORT basada en la probabilidad calculada
            if (probability > 0.5)
            {
                tradeDirection = 1;  // señal de compra (LONG)
            }
            else if (probability < 0.5)
            {
                tradeDirection = -1; // señal de venta (SHORT)
            }
            else
            {
                tradeDirection = 0;
            }

            // Si se generó una señal válida, iniciar nueva "operación"
            if (tradeDirection != 0)
            {
                inTrade = true;
                entryPriceSet = false;  // la entrada se establecerá en la próxima barra
                signalTime = Time[0];
                signalPrice = Close[0];
                signalBarIndex = CurrentBar;
                // Dibujar flecha en el gráfico indicando la señal
                if (tradeDirection == 1)
                {
                    Draw.ArrowUp(this, "longArrow" + CurrentBar, true, 0, Low[0] - TickSize, Brushes.Lime);
                }
                else if (tradeDirection == -1)
                {
                    Draw.ArrowDown(this, "shortArrow" + CurrentBar, true, 0, High[0] + TickSize, Brushes.Fuchsia);
                }
            }
        }

        #region Properties (Parameters and Series)
        [NinjaScriptProperty]
        [Range(1, int.MaxValue)]
        [Display(Name = "SignalPoints", Order = 0, GroupName = "Parameters", Description = "Puntos de Take Profit/Stop Loss (en unidades del instrumento, ej: 10 = 10 puntos)")]
        public int SignalPoints { get; set; }

        [NinjaScriptProperty]
        [Range(0, int.MaxValue)]
        [Display(Name = "CooldownBars", Order = 1, GroupName = "Parameters", Description = "Cantidad mínima de barras entre señales consecutivas")]
        public int CooldownBars { get; set; }

        [Browsable(false)]
        [XmlIgnore]
        public Series<double> VolSpikeSeries
        {
            get { return volSpikeSeries; }
        }

        [Browsable(false)]
        [XmlIgnore]
        public Series<double> ImbalanceSeries
        {
            get { return imbalanceSeries; }
        }

        [Browsable(false)]
        [XmlIgnore]
        public Series<double> MomentumSeries
        {
            get { return momentumSeries; }
        }
        #endregion
    }
}


#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private SuperCompositeArrowPro[] cacheSuperCompositeArrowPro;
		public SuperCompositeArrowPro SuperCompositeArrowPro(int signalPoints, int cooldownBars)
		{
			return SuperCompositeArrowPro(Input, signalPoints, cooldownBars);
		}

		public SuperCompositeArrowPro SuperCompositeArrowPro(ISeries<double> input, int signalPoints, int cooldownBars)
		{
			if (cacheSuperCompositeArrowPro != null)
				for (int idx = 0; idx < cacheSuperCompositeArrowPro.Length; idx++)
					if (cacheSuperCompositeArrowPro[idx] != null && cacheSuperCompositeArrowPro[idx].SignalPoints == signalPoints && cacheSuperCompositeArrowPro[idx].CooldownBars == cooldownBars && cacheSuperCompositeArrowPro[idx].EqualsInput(input))
						return cacheSuperCompositeArrowPro[idx];
			return CacheIndicator<SuperCompositeArrowPro>(new SuperCompositeArrowPro(){ SignalPoints = signalPoints, CooldownBars = cooldownBars }, input, ref cacheSuperCompositeArrowPro);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.SuperCompositeArrowPro SuperCompositeArrowPro(int signalPoints, int cooldownBars)
		{
			return indicator.SuperCompositeArrowPro(Input, signalPoints, cooldownBars);
		}

		public Indicators.SuperCompositeArrowPro SuperCompositeArrowPro(ISeries<double> input , int signalPoints, int cooldownBars)
		{
			return indicator.SuperCompositeArrowPro(input, signalPoints, cooldownBars);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.SuperCompositeArrowPro SuperCompositeArrowPro(int signalPoints, int cooldownBars)
		{
			return indicator.SuperCompositeArrowPro(Input, signalPoints, cooldownBars);
		}

		public Indicators.SuperCompositeArrowPro SuperCompositeArrowPro(ISeries<double> input , int signalPoints, int cooldownBars)
		{
			return indicator.SuperCompositeArrowPro(input, signalPoints, cooldownBars);
		}
	}
}

#endregion
