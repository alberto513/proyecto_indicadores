CorrectedSignalTP_S


using System;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Windows.Media;
using NinjaTrader.Data;
using NinjaTrader.Gui.Tools;
using NinjaTrader.NinjaScript;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;

namespace NinjaTrader.NinjaScript.Indicators
{
    public class CorrectedSignalTP_SL : Indicator
    {
        private int signalBarIndex = -1;
        private double signalPrice;
        private DateTime signalTime;
        private bool signalIsLong;

        private int entryBarIndex = -1;
        private double entryPrice;
        private double tpPrice;
        private double slPrice;
        private bool waitingForExit;

        // Variables de rendimiento
        private int totalTrades;
        private int totalTP;
        private int totalSL;
        private double totalPoints;

        [NinjaScriptProperty]
        [Range(1, int.MaxValue)]
        [Display(Name = "Puntos para TP/SL", GroupName = "Parametros", Order = 0)]
        public int SignalPoints { get; set; } = 10;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Description       = "Indicador corregido: registra señales con TP/SL de N puntos, dibuja flechas y mide rendimiento.";
                Name              = "CorrectedSignalTP_SL";
                Calculate         = Calculate.OnBarClose;
                IsOverlay         = true;
                DrawOnPricePanel  = true;
                DisplayInDataBox  = true;
                PaintPriceMarkers = false;
                IsAutoScale       = true;
            }
            else if (State == State.DataLoaded)
            {
                totalTrades = 0;
                totalTP     = 0;
                totalSL     = 0;
                totalPoints = 0;
                waitingForExit = false;
            }
            else if (State == State.Terminated)
            {
                Print(string.Format("Resumen Indicador: Trades={0}, TP={1}, SL={2}, PuntosTotales={3:0.00}",
                    totalTrades, totalTP, totalSL, totalPoints));
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < 1)
                return;

            // Detección de señal
            if (!waitingForExit)
            {
                if (CrossAbove(Close, SMA(14), 1))
                {
                    signalBarIndex = CurrentBar;
                    signalPrice    = Close[0];
                    signalTime     = Time[0];
                    signalIsLong   = true;
                    Draw.ArrowUp(this, "LongArrow" + CurrentBar, false, 0, Low[0] - (2 * TickSize), Brushes.Lime);
                    waitingForExit = true;
                    entryBarIndex  = CurrentBar + 1;
                }
                else if (CrossBelow(Close, SMA(14), 1))
                {
                    signalBarIndex = CurrentBar;
                    signalPrice    = Close[0];
                    signalTime     = Time[0];
                    signalIsLong   = false;
                    Draw.ArrowDown(this, "ShortArrow" + CurrentBar, false, 0, High[0] + (2 * TickSize), Brushes.Red);
                    waitingForExit = true;
                    entryBarIndex  = CurrentBar + 1;
                }
            }
            
            // Gestión de salida TP/SL
            if (waitingForExit && CurrentBar >= entryBarIndex)
            {
                // Configurar entrada en la primera barra de entrada
                if (CurrentBar == entryBarIndex)
                {
                    entryPrice = Open[0];
                    tpPrice    = entryPrice + (signalIsLong ? SignalPoints : -SignalPoints);
                    slPrice    = entryPrice - (signalIsLong ? SignalPoints : -SignalPoints);
                    totalTrades++;
                }

                // Comprobar si alcanzó TP o SL
                bool hitTP = signalIsLong ? High[0] >= tpPrice : Low[0] <= tpPrice;
                bool hitSL = signalIsLong ? Low[0] <= slPrice : High[0] >= slPrice;

                if (hitTP || hitSL)
                {
                    string result = hitTP ? "TP" : "SL";
                    if (result == "TP")
                    {
                        totalTP++;
                        totalPoints += SignalPoints;
                    }
                    else
                    {
                        totalSL++;
                        totalPoints -= SignalPoints;
                    }

                    // Formateo
                    Func<double, string> fmt = v => v.ToString("0.00", CultureInfo.InvariantCulture).Replace('.', ',');
                    string output = string.Format("{0}={1} - Señal {2} Entrada={3} - TP={4} - SL={5} - Resultado={6}",
                        signalIsLong ? "LONG" : "SHORT",
                        signalTime.ToString("HH:mm:ss"),
                        fmt(signalPrice),
                        fmt(entryPrice),
                        fmt(tpPrice),
                        fmt(slPrice),
                        result);

                    Print(output);
                    waitingForExit = false;
                    signalBarIndex = -1;
                }
            }
        }
    }
}


#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private CorrectedSignalTP_SL[] cacheCorrectedSignalTP_SL;
		public CorrectedSignalTP_SL CorrectedSignalTP_SL(int signalPoints)
		{
			return CorrectedSignalTP_SL(Input, signalPoints);
		}

		public CorrectedSignalTP_SL CorrectedSignalTP_SL(ISeries<double> input, int signalPoints)
		{
			if (cacheCorrectedSignalTP_SL != null)
				for (int idx = 0; idx < cacheCorrectedSignalTP_SL.Length; idx++)
					if (cacheCorrectedSignalTP_SL[idx] != null && cacheCorrectedSignalTP_SL[idx].SignalPoints == signalPoints && cacheCorrectedSignalTP_SL[idx].EqualsInput(input))
						return cacheCorrectedSignalTP_SL[idx];
			return CacheIndicator<CorrectedSignalTP_SL>(new CorrectedSignalTP_SL(){ SignalPoints = signalPoints }, input, ref cacheCorrectedSignalTP_SL);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.CorrectedSignalTP_SL CorrectedSignalTP_SL(int signalPoints)
		{
			return indicator.CorrectedSignalTP_SL(Input, signalPoints);
		}

		public Indicators.CorrectedSignalTP_SL CorrectedSignalTP_SL(ISeries<double> input , int signalPoints)
		{
			return indicator.CorrectedSignalTP_SL(input, signalPoints);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.CorrectedSignalTP_SL CorrectedSignalTP_SL(int signalPoints)
		{
			return indicator.CorrectedSignalTP_SL(Input, signalPoints);
		}

		public Indicators.CorrectedSignalTP_SL CorrectedSignalTP_SL(ISeries<double> input , int signalPoints)
		{
			return indicator.CorrectedSignalTP_SL(input, signalPoints);
		}
	}
}

#endregion
